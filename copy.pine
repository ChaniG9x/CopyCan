//@version=5
indicator("Tier 2 Pattern with Cascading Gates (CAPA)", overlay=true, shorttitle="T2DP_Cascaded")

// Plot EMAs on the chart
ema10_main  = ta.ema(close, 10)
ema20_main  = ta.ema(close, 20)
ema200_main = ta.ema(close, 200)
plot(ema10_main, title="EMA 10", color=color.blue)
plot(ema20_main, title="EMA 20", color=color.red)
plot(ema200_main, title="EMA 200", color=color.orange)

// Helper function
crosses(_ema) =>
    (low < _ema) and (high > _ema)

// Tier 2 pattern detection function.
// This function uses persistent state and does not reset at the start of a new day.
f_tier2Pattern() =>
    emaLen10  = 10
    emaLen20  = 20
    emaLen200 = 200
    ema10  = ta.ema(close, emaLen10)
    ema20  = ta.ema(close, emaLen20)
    ema200 = ta.ema(close, emaLen200)
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)
    
    var bool restricted       = false
    var bool bearishCandidate = false
    var bool justReset        = false
    justReset := false

    if restricted
        if (close > open) and (close > ema10)
            restricted       := false
            justReset        := true
            bearishCandidate := false

    var bool permission = false
    if not restricted and not justReset and emaTrendOk
        condA = (close > open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        condBearCandidate = (close < open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        if condBearCandidate
            bearishCandidate := true
        condBConfirm = bearishCandidate and (close > open) and (close > ema10)

        if condA or condBConfirm
            permission       := true
            bearishCandidate := false

    if not restricted and not justReset
        if (open < ema20) or (close < ema20)
            restricted       := true
            bearishCandidate := false

    result = permission and barstate.isconfirmed and (not restricted)
    permission := false
    result

//-----------------------------------
// 1) DAILY
//-----------------------------------
// Compute the daily pattern. The daily gate for the current day comes from the previous daily candle.
dailyPattern = request.security(syminfo.tickerid, "D", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
dailyGate    = dailyPattern[1]

// Show label on the daily candle that meets conditions.
if timeframe.period == "D" and dailyPattern
    label.new(bar_index, high, "Daily Pattern", style=label.style_label_down, color=color.blue, textcolor=color.white)

//-----------------------------------
// 2) 4H
//-----------------------------------
// Compute the current 4H pattern and get the previous 4H result.
pattern4hNow  = request.security(syminfo.tickerid, "240", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern4hGate = pattern4hNow[1]

// The 4H permission for the current day is based on yesterday's daily permission and the previous 4H result.
pattern_4h = dailyGate and pattern4hGate

// Plot the 4H label on the candle that meets conditions.
if timeframe.period == "240" and pattern4hNow
    label.new(bar_index, high, "4h Pattern", style=label.style_label_down, color=color.green, textcolor=color.white)

//-----------------------------------
// 3) 1H
//-----------------------------------
// Compute the current 1H pattern and get the previous 1H result.
pattern1hNow  = request.security(syminfo.tickerid, "60", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern1hGate = pattern1hNow[1]

// The 1H permission is based on yesterday's daily permission and the previous 1H result.
pattern_1h = dailyGate and pattern1hGate

// Plot the 1H label.
if timeframe.period == "60" and pattern1hNow
    label.new(bar_index, high, "1h Pattern", style=label.style_label_down, color=color.green, textcolor=color.white)

//-----------------------------------
// 4) Cascading to lower timeframes
//-----------------------------------
// For lower timeframes that descend from 4H, use the previous 4H gate result.
// 4a) 15-minute based on 4H permission:
pattern15mNow_from4h = request.security(syminfo.tickerid, "15", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern15mGate_from4h = pattern15mNow_from4h[1]
pattern_15m_from4h    = pattern_4h and pattern15mGate_from4h

// 4b) 1-minute based on 4H permission:
pattern1mNow_from4h  = request.security(syminfo.tickerid, "1", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern1mGate_from4h = pattern1mNow_from4h[1]
pattern_1m_from4h    = pattern_4h and pattern1mGate_from4h

// For lower timeframes that descend from 1H, use the previous 1H gate result.
// 1-minute based on 1H permission:
pattern1mNow_from1h  = request.security(syminfo.tickerid, "1", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern1mGate_from1h = pattern1mNow_from1h[1]
pattern_1m_from1h    = pattern_1h and pattern1mGate_from1h

// 10-second based on 1H permission:
pattern10sNow_from1h  = request.security(syminfo.tickerid, "10S", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern10sGate_from1h = pattern10sNow_from1h[1]
pattern_10s_from1h    = pattern_1h and pattern10sGate_from1h

//-----------------------------------
// Labels on lower timeframes
//-----------------------------------
// 15m label based on 4H permission.
if timeframe.period == "15" and pattern_15m_from4h
    label.new(bar_index, low, "15m (4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)

// 1m labels: one based on 4H and one based on 1H permission.
if timeframe.period == "1" and pattern_1m_from4h
    label.new(bar_index, low, "1m (4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)
if timeframe.period == "1" and pattern_1m_from1h
    label.new(bar_index, low, "1m (1h)", style=label.style_label_up, color=color.orange, textcolor=color.white)

// 10s label based on 1H permission.
if timeframe.period == "10S" and pattern_10s_from1h
    label.new(bar_index, high, "10s (1h)", style=label.style_label_left, color=color.red, textcolor=color.white)
