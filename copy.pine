//@version=5
indicator("Tier 2 Pattern with Cascading Gates (CAPA)", overlay=true, shorttitle="T2DP_Cascaded")

// Plot EMAs on the chart
ema10_main  = ta.ema(close, 10)
ema20_main  = ta.ema(close, 20)
ema200_main = ta.ema(close, 200)
plot(ema10_main, title="EMA 10", color=color.blue)
plot(ema20_main, title="EMA 20", color=color.red)
plot(ema200_main, title="EMA 200", color=color.orange)

// Helper function
crosses(_ema) =>
    (low < _ema) and (high > _ema)

// Tier 2 pattern detection
f_tier2Pattern() =>
    emaLen10  = 10
    emaLen20  = 20
    emaLen200 = 200
    ema10  = ta.ema(close, emaLen10)
    ema20  = ta.ema(close, emaLen20)
    ema200 = ta.ema(close, emaLen200)
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)
    
    var bool restricted       = false
    var bool bearishCandidate = false
    var bool justReset        = false
    justReset := false

    if restricted
        if (close > open) and (close > ema10)
            restricted       := false
            justReset        := true
            bearishCandidate := false

    var bool permission = false
    if not restricted and not justReset and emaTrendOk
        condA = (close > open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        condBearCandidate = (close < open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        if condBearCandidate
            bearishCandidate := true
        condBConfirm = bearishCandidate and (close > open) and (close > ema10)

        if condA or condBConfirm
            permission       := true
            bearishCandidate := false

    if not restricted and not justReset
        if (open < ema20) or (close < ema20)
            restricted       := true
            bearishCandidate := false

    result = permission and barstate.isconfirmed and (not restricted)
    permission := false
    result

//-----------------------------------
// 1) DAILY
//-----------------------------------
// - dailyPattern: true if today's candle meets conditions
// - dailyGate: permission for the next day, using [1]
dailyPattern = request.security(syminfo.tickerid, "D", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
dailyGate    = dailyPattern[1]

// Show label on the candle that meets conditions (no offset).
if timeframe.period == "D" and dailyPattern
    label.new(bar_index, high, "Daily Pattern", style=label.style_label_down, color=color.blue, textcolor=color.white)

//-----------------------------------
// 2) 4H
//-----------------------------------
// - pattern4hNow: true if this 4h candle meets conditions
// - pattern4hGate: gate for the NEXT 4h candle
pattern4hNow  = request.security(syminfo.tickerid, "240", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern4hGate = pattern4hNow[1]

// The 4h is also gated by the dailyGate. This 4hâ€™s permission is open if dailyGate is true AND pattern4hGate is true.
pattern_4h = dailyGate and pattern4hGate

// Plot the 4h label on the candle that meets conditions.
if timeframe.period == "240" and pattern4hNow
    label.new(bar_index, high, "4h Pattern", style=label.style_label_down, color=color.green, textcolor=color.white)

//-----------------------------------
// 3) 1H
//-----------------------------------
// - pattern1hNow: current 1h candle meets conditions
// - pattern1hGate: gate for the NEXT 1h candle
pattern1hNow  = request.security(syminfo.tickerid, "60", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern1hGate = pattern1hNow[1]

// The 1h is gated by both the dailyGate and pattern1hGate
pattern_1h = dailyGate and pattern1hGate

// Plot 1h label
if timeframe.period == "60" and pattern1hNow
    label.new(bar_index, high, "1h Pattern", style=label.style_label_down, color=color.green, textcolor=color.white)

//-----------------------------------
// 4) Cascading to lower timeframes
//-----------------------------------
// 4a) For timeframes descending from 4h:
pattern_15m_from4h = pattern_4h and request.security(syminfo.tickerid, "15", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_1m_from4h  = pattern_4h and request.security(syminfo.tickerid, "1",  f_tier2Pattern(), lookahead=barmerge.lookahead_off)

// 4b) For timeframes descending from 1h:
pattern_1m_from1h  = pattern_1h and request.security(syminfo.tickerid, "1",  f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_10s_from1h = pattern_1h and request.security(syminfo.tickerid, "10S", f_tier2Pattern(), lookahead=barmerge.lookahead_off)

//-----------------------------------
// Labels on lower timeframes
//-----------------------------------
// 15m
if timeframe.period == "15" and pattern_15m_from4h
    label.new(bar_index, low, "15m (4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)

// 1m
if timeframe.period == "1" and pattern_1m_from4h
    label.new(bar_index, low, "1m (4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)
if timeframe.period == "1" and pattern_1m_from1h
    label.new(bar_index, low, "1m (1h)", style=label.style_label_up, color=color.orange, textcolor=color.white)

// 10s
if timeframe.period == "10S" and pattern_10s_from1h
    label.new(bar_index, high, "10s (1h)", style=label.style_label_left, color=color.red, textcolor=color.white)
