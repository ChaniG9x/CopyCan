//@version=5
indicator("Tier 2 Pattern with Cascading Gates (CAPA)", overlay=true, shorttitle="T2DP_Cascaded")

// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
// EMA PLOTS
// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
ema10_main  = ta.ema(close, 10)
ema20_main  = ta.ema(close, 20)
ema200_main = ta.ema(close, 200)

plot(ema10_main,  title="EMA 10",  color=color.blue)
plot(ema20_main,  title="EMA 20",  color=color.red)
plot(ema200_main, title="EMA 200", color=color.orange)

// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
// HELPER: CROSS CHECK
// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
crosses(_ema) =>
    (low < _ema) and (high > _ema)

// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
// MAIN PATTERN FUNCTION
// Mirrors your two-condition pattern with persistent states, including a "bearish candidate" approach
// and restriction if candle open/close is below the 20 EMA. Returns 'true' only if pattern is confirmed
// (i.e. bar is closed) and not restricted.
// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
f_tier2Pattern() =>
    // EMA calculations
    emaLen10  = 10
    emaLen20  = 20
    emaLen200 = 200
    ema10  = ta.ema(close, emaLen10)
    ema20  = ta.ema(close, emaLen20)
    ema200 = ta.ema(close, emaLen200)
    
    // Trend check
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)
    
    // Persistent states for each timeframe
    var bool restricted       = false
    var bool bearishCandidate = false
    var bool justReset        = false
    
    justReset := false  // Reset each new bar
    
    // If restricted, check if this candle resets it
    if restricted
        if (close > open) and (close > ema10)
            restricted       := false
            justReset        := true
            bearishCandidate := false
    
    // Check pattern if not restricted, not reset, and trend is ok
    var bool permission = false
    if not restricted and not justReset and emaTrendOk
        // Condition A - single bullish candle that crosses EMA10 or EMA20 and closes above EMA10
        condA = (close > open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        
        // Condition B - two-candle sequence: first a bearish candidate, then a bullish confirm
        condBearCandidate = (close < open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        if condBearCandidate
            bearishCandidate := true
        
        condBConfirm = bearishCandidate and (close > open) and (close > ema10)
        
        if condA or condBConfirm
            permission       := true
            bearishCandidate := false
    
    // After detection, check if we should set restriction
    if not restricted and not justReset
        if (open < ema20) or (close < ema20)
            restricted       := true
            bearishCandidate := false
    
    // Return 'true' only if the bar is confirmed and we have permission
    result = permission and barstate.isconfirmed and not restricted
    permission := false
    result

// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
// CASCADING LOGIC
// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
// 1) We check the PREVIOUS daily candle ([1]) for the gate (dailyGate). This is the signal that
//    grants permission to lower timeframes throughout today's trading session.
// 2) For labeling on the daily chart, we use dailyLabelSignal with NO offset, so we
//    place the label on the actual daily candle that triggered the pattern (i.e., yesterday's candle).
// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
dailyGate        = request.security(syminfo.tickerid, "D", f_tier2Pattern()[1], lookahead=barmerge.lookahead_off)
dailyLabelSignal = request.security(syminfo.tickerid, "D", f_tier2Pattern(),    lookahead=barmerge.lookahead_off)

// Lower timeframes can only proceed if dailyGate is true
pattern_4h = dailyGate and request.security(syminfo.tickerid, "240", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_1h = dailyGate and request.security(syminfo.tickerid, "60",  f_tier2Pattern(), lookahead=barmerge.lookahead_off)

// 4h cascade -> 15m, 1m
pattern_15m_from4h = pattern_4h and request.security(syminfo.tickerid, "15", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_1m_from4h  = pattern_4h and request.security(syminfo.tickerid, "1",  f_tier2Pattern(), lookahead=barmerge.lookahead_off)

// 1h cascade -> 1m, 10s
pattern_1m_from1h  = pattern_1h and request.security(syminfo.tickerid, "1",  f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_10s_from1h = pattern_1h and request.security(syminfo.tickerid, "10S", f_tier2Pattern(), lookahead=barmerge.lookahead_off)

// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
// LABELING
// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
// 1) For the daily chart, we use dailyLabelSignal (the "no offset" call) so the label is placed
//    on the candle that actually triggered the pattern. If that was yesterday, you'll see it on
//    that candle on the daily chart.
// 2) For lower timeframes, we simply label if the pattern for that timeframe is true
//    AND the chart's resolution matches.
// ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
if timeframe.period == "D" and dailyLabelSignal
    label.new(bar_index, high, "Daily Pattern", style=label.style_label_down, color=color.green, textcolor=color.white)

// 4h
if timeframe.period == "240" and pattern_4h
    label.new(bar_index, high, "4h Pattern", style=label.style_label_down, color=color.orange, textcolor=color.white)

// 1h
if timeframe.period == "60" and pattern_1h
    label.new(bar_index, high, "1h Pattern", style=label.style_label_down, color=color.red, textcolor=color.white)

// 15m
if timeframe.period == "15" and pattern_15m_from4h
    label.new(bar_index, low, "15m (4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)

// 1m (4h)
if timeframe.period == "1" and pattern_1m_from4h
    label.new(bar_index, low, "1m (4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)
// 1m (1h)
if timeframe.period == "1" and pattern_1m_from1h
    label.new(bar_index, low, "1m (1h)", style=label.style_label_up, color=color.red, textcolor=color.white)

// 10s (1h)
if timeframe.period == "10S" and pattern_10s_from1h
    label.new(bar_index, high, "10s (1h)", style=label.style_label_left, color=color.red, textcolor=color.white)
