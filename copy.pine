//@version=5
indicator("Tier 2 Pattern with Cascading Gates (CAPA)", overlay=true, shorttitle="T2DP_Cascaded")

// Plot EMAs on the chart
ema10_main  = ta.ema(close, 10)
ema20_main  = ta.ema(close, 20)
ema200_main = ta.ema(close, 200)
plot(ema10_main, title="EMA 10", color=color.blue)
plot(ema20_main, title="EMA 20", color=color.red)
plot(ema200_main, title="EMA 200", color=color.orange)

// Helper function defined at the top level
crosses(_ema) =>
    (low < _ema) and (high > _ema)

// Updated stateful Tier 2 pattern detection function (reflecting your reference candlestick conditions)
f_tier2Pattern() =>
    // EMA settings and calculations
    emaLen10  = 10
    emaLen20  = 20
    emaLen200 = 200
    ema10  = ta.ema(close, emaLen10)
    ema20  = ta.ema(close, emaLen20)
    ema200 = ta.ema(close, emaLen200)
    // Check EMA hierarchy: EMA10 > EMA20 > EMA200
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)
    
    // Persistent state variables (each timeframe instance maintains its own state)
    var bool restricted       = false   // Set when the candle triggers a restriction
    var bool bearishCandidate = false   // Set when a bearish candidate is detected (waiting for confirmation)
    var bool justReset        = false   // True on the bar that resets restriction
    // Reset justReset at the start of each bar
    justReset := false

    // If currently restricted, check if this candle resets the restriction.
    if restricted
        // Reset if a bullish candle closes above EMA10.
        if (close > open) and (close > ema10)
            restricted       := false
            justReset        := true
            bearishCandidate := false

    // Pattern detection is run only if not restricted, not on the reset bar, and if the EMA trend is valid.
    var bool permission = false
    if not restricted and not justReset and emaTrendOk
        // Condition A: Single bullish candle that crosses EMA10 or EMA20 and closes above EMA10.
        condA = (close > open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        
        // Condition B: Two-candle sequence.
        // First, detect a bearish candidate candle.
        condBearCandidate = (close < open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        if condBearCandidate
            bearishCandidate := true
        // Then, if the current candle confirms the candidate (bullish and closes above EMA10):
        condBConfirm = bearishCandidate and (close > open) and (close > ema10)
        
        // If either condition is met, permission is granted.
        if condA or condBConfirm
            permission       := true
            bearishCandidate := false

    // After pattern detection, check if the current candle triggers restriction.
    if not restricted and not justReset
        if (open < ema20) or (close < ema20)
            restricted       := true
            bearishCandidate := false

    // Return true only if permission is granted, the bar is confirmed, and we're not restricted.
    result = permission and barstate.isconfirmed and (not restricted)
    permission := false
    result

// ------------------- Cascading Logic -------------------
// The cascading logic now uses only the previous daily candle ([1] offset) to grant permission for the lower timeframes.
// This ensures that lower timeframe labels are based solely on confirmed historical data from the previous daily candle.
dailyConfirmed = request.security(syminfo.tickerid, "D", f_tier2Pattern()[1], lookahead=barmerge.lookahead_off)

// Use dailyConfirmed as the gate for cascading searches on lower timeframes.
pattern_4h = dailyConfirmed and request.security(syminfo.tickerid, "240", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_1h = dailyConfirmed and request.security(syminfo.tickerid, "60",  f_tier2Pattern(), lookahead=barmerge.lookahead_off)

// ------------------- 4h Cascade -------------------
// If the 4h pattern is confirmed, allow search on 15-minute and 1-minute charts.
pattern_15m_from4h = pattern_4h and request.security(syminfo.tickerid, "15", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_1m_from4h  = pattern_4h and request.security(syminfo.tickerid, "1",  f_tier2Pattern(), lookahead=barmerge.lookahead_off)

// ------------------- 1h Cascade -------------------
// If the 1h pattern is confirmed, allow search on 1-minute and 10-second charts.
pattern_1m_from1h  = pattern_1h and request.security(syminfo.tickerid, "1",  f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_10s_from1h = pattern_1h and request.security(syminfo.tickerid, "10S", f_tier2Pattern(), lookahead=barmerge.lookahead_off)

// ------------------- Debugging Labels -------------------
// Each label is drawn only if the chart's current resolution matches the intended timeframe
// and the corresponding permission and pattern is confirmed.

// DAILY: Draw the daily label on the daily candle (based on dailyConfirmed from the previous day).
if timeframe.period == "D" and dailyConfirmed
    label.new(bar_index, high, "T2", style=label.style_label_down, color=color.green, textcolor=color.white)

// 4h label appears only on a 4h chart.
if timeframe.period == "240" and pattern_4h
    label.new(bar_index, high, "4h", style=label.style_label_down, color=color.orange, textcolor=color.white)

// 1h label appears only on a 1h chart.
if timeframe.period == "60" and pattern_1h
    label.new(bar_index, high, "1h", style=label.style_label_down, color=color.red, textcolor=color.white)

// 15m label appears only on a 15-min chart.
if timeframe.period == "15" and pattern_15m_from4h
    label.new(bar_index, low, "15m (4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)

// 1m labels appear only on a 1-min chart.
// Identify if the permission came from the 4h gate.
if timeframe.period == "1" and pattern_1m_from4h
    label.new(bar_index, low, "1m (4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)
// Identify if the permission came from the 1h gate.
if timeframe.period == "1" and pattern_1m_from1h
    label.new(bar_index, low, "1m (1h)", style=label.style_label_up, color=color.red, textcolor=color.white)

// 10s label appears only on a 10-sec chart.
if timeframe.period == "10S" and pattern_10s_from1h
    label.new(bar_index, high, "10s (1h)", style=label.style_label_left, color=color.red, textcolor=color.white)
