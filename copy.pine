//@version=5
indicator("Tier 2 Pattern with Cascading Gates (CAPA)", overlay=true, shorttitle="T2DP_Cascaded")

// Plot EMAs on the chart
ema10_main  = ta.ema(close, 10)
ema20_main  = ta.ema(close, 20)
ema200_main = ta.ema(close, 200)
plot(ema10_main, title="EMA 10", color=color.blue)
plot(ema20_main, title="EMA 20", color=color.red)
plot(ema200_main, title="EMA 200", color=color.orange)

// Helper function defined at the top level
crosses(_ema) =>
    (low < _ema) and (high > _ema)

// Updated stateful Tier 2 pattern detection function (reflecting your reference candlestick conditions)
f_tier2Pattern() =>
    // EMA settings and calculations
    emaLen10  = 10
    emaLen20  = 20
    emaLen200 = 200
    ema10  = ta.ema(close, emaLen10)
    ema20  = ta.ema(close, emaLen20)
    ema200 = ta.ema(close, emaLen200)
    // Check EMA hierarchy: EMA10 > EMA20 > EMA200
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)
    
    // Persistent state variables (each timeframe instance maintains its own state)
    var bool restricted       = false   // Set when the candle triggers a restriction
    var bool bearishCandidate = false   // Set when a bearish candidate is detected (waiting for confirmation)
    var bool justReset        = false   // True on the bar that resets restriction
    // Reset justReset at the start of each bar
    justReset := false

    // If currently restricted, check if this candle resets the restriction.
    if restricted
        // Reset if a bullish candle closes above EMA10.
        if (close > open) and (close > ema10)
            restricted       := false
            justReset        := true
            bearishCandidate := false

    // Pattern detection is run only if not restricted, not on the reset bar, and if the EMA trend is valid.
    var bool permission = false
    if not restricted and not justReset and emaTrendOk
        // Condition A: Single bullish candle that crosses EMA10 or EMA20 and closes above EMA10.
        condA = (close > open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        
        // Condition B: Two-candle sequence.
        // First, detect a bearish candidate candle.
        condBearCandidate = (close < open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        if condBearCandidate
            bearishCandidate := true
        // Then, if the current candle confirms the candidate (bullish and closes above EMA10):
        condBConfirm = bearishCandidate and (close > open) and (close > ema10)
        
        // If either condition is met, permission is granted.
        if condA or condBConfirm
            permission       := true
            bearishCandidate := false

    // After pattern detection, check if the current candle triggers restriction.
    if not restricted and not justReset
        if (open < ema20) or (close < ema20)
            restricted       := true
            bearishCandidate := false

    // Return true only if permission is granted, the bar is confirmed, and we're not restricted.
    result = permission and barstate.isconfirmed and (not restricted)
    permission := false
    result

// --- Persistent Boolean Variables for Each Timeframe ---
// These variables will be updated on each bar for their respective timeframe.
var bool dailyPattern    = false
var bool fourhPattern    = false
var bool onehPattern     = false
var bool fifteenmPattern = false
var bool onemPattern     = false
var bool tensPattern     = false

// --- Pass higher timeframe confirmations to lower timeframes ---
// These lines convert your booleans into a 1/0 value from their respective timeframes
dailyConfirmed_pass  = request.security(syminfo.tickerid, "D",   dailyPattern ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
fourhConfirmed_pass  = request.security(syminfo.tickerid, "240", fourhPattern ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
onehConfirmed_pass   = request.security(syminfo.tickerid, "60",  onehPattern ? 1 : 0, lookahead=barmerge.lookahead_off) == 1

// --- Update persistent booleans based on timeframe condition checks ---

// Daily timeframe
if timeframe.period == "D"
    dailyPattern := f_tier2Pattern()
    if dailyPattern
        label.new(bar_index, high, "T2", style=label.style_label_down, color=color.green, textcolor=color.white)
    else
        dailyPattern := false

// 4-hour timeframe
if timeframe.period == "240"
    fourhPattern := f_tier2Pattern()
    if fourhPattern and dailyConfirmed_pass
        label.new(bar_index, high, "4h", style=label.style_label_down, color=color.orange, textcolor=color.white)
    else
        fourhPattern := false

// 1-hour timeframe
if timeframe.period == "60"
    onehPattern := f_tier2Pattern()
    if onehPattern and dailyConfirmed_pass
        label.new(bar_index, high, "1h", style=label.style_label_down, color=color.red, textcolor=color.white)
    else
        onehPattern := false

// 15-minute timeframe
if timeframe.period == "15"
    fifteenmPattern := f_tier2Pattern()
    if fifteenmPattern and fourhConfirmed_pass
        label.new(bar_index, low, "15m", style=label.style_label_up, color=color.orange, textcolor=color.white)
    else
        fifteenmPattern := false

// 1-minute timeframe
if timeframe.period == "1"
    onemPattern := f_tier2Pattern()
    if onemPattern and (fourhConfirmed_pass or onehConfirmed_pass)
        label.new(bar_index, low, "1m", style=label.style_label_up, color=color.red, textcolor=color.white)
    else
        onemPattern := false

// 10-second timeframe
if timeframe.period == "10S"
    tensPattern := f_tier2Pattern()
    if tensPattern and onehConfirmed_pass
        label.new(bar_index, high, "10s", style=label.style_label_left, color=color.red, textcolor=color.white)
    else
        tensPattern := false
