//@version=5
indicator("Hierarchical T2 Pattern (CAPA) Example", overlay=true)

//---------------------------------------------------
// 1. Define a helper function for the T2 pattern
//---------------------------------------------------
f_t2_pattern(_close, _open, _high, _low, emaLen10, emaLen20, emaLen200) =>
    // Calculate EMAs
    _ema10  = ta.ema(_close, emaLen10)
    _ema20  = ta.ema(_close, emaLen20)
    _ema200 = ta.ema(_close, emaLen200)

    // Check the EMA hierarchy
    _emaTrendOk = (_ema10 > _ema20) and (_ema20 > _ema200)

    // A helper for "crosses" logic
    crosses(_low, _high, val) =>
        (_low < val) and (_high > val)

    // We need persistent variables for restriction logic
    // Because these are function-scoped, we will return them and store them in global-scope variables
    var bool _restricted       = false
    var bool _bearishCandidate = false
    var bool _justReset        = false
    var bool _permission       = false

    // Reset justReset to false on each call
    _justReset := false

    // If restricted, check if we can reset
    if _restricted
        // Reset if we get a bullish candle that closes above the 10 EMA
        if (_close > _open) and (_close > _ema10)
            _restricted       := false
            _justReset        := true
            _bearishCandidate := false

    // Main pattern logic, only if not restricted, not a reset bar, and EMAs are in an uptrend
    if (not _restricted) and (not _justReset) and _emaTrendOk
        // Condition A: single bullish candle
        condA = (_close > _open) and (crosses(_low, _high, _ema10) or crosses(_low, _high, _ema20)) and (_close > _ema10)

        // Condition B: two-candle sequence (bearish, then bullish)
        condBearCandidate = (_close < _open) and (crosses(_low, _high, _ema10) or crosses(_low, _high, _ema20)) and (_close > _ema10)
        if condBearCandidate
            _bearishCandidate := true

        condBConfirm = _bearishCandidate and (_close > _open) and (_close > _ema10)

        // If either Condition A or Condition B is met, we have permission
        if condA or condBConfirm
            _permission := true
            // Reset the bearish candidate if used
            _bearishCandidate := false

    // Check if the current candle triggers restriction
    // If open or close is below the 20 EMA, become restricted (unless we just reset)
    if (not _restricted) and (not _justReset)
        if (_open < _ema20) or (_close < _ema20)
            _restricted       := true
            _bearishCandidate := false

    // Return all key data points
    [
     _ema10, _ema20, _ema200,        // EMAs for optional plotting
     _restricted, _bearishCandidate, // States
     _justReset, _permission         // Additional booleans
    ]


//---------------------------------------------------
// 2. Pull in each timeframe’s data using request.security
//---------------------------------------------------

//--- Daily
dailyClose = request.security(syminfo.tickerid, "D", close)
dailyOpen  = request.security(syminfo.tickerid, "D", open)
dailyHigh  = request.security(syminfo.tickerid, "D", high)
dailyLow   = request.security(syminfo.tickerid, "D", low)

//--- 4h
fhClose = request.security(syminfo.tickerid, "240", close)
fhOpen  = request.security(syminfo.tickerid, "240", open)
fhHigh  = request.security(syminfo.tickerid, "240", high)
fhLow   = request.security(syminfo.tickerid, "240", low)

//--- 1h
onehClose = request.security(syminfo.tickerid, "60", close)
onehOpen  = request.security(syminfo.tickerid, "60", open)
onehHigh  = request.security(syminfo.tickerid, "60", high)
onehLow   = request.security(syminfo.tickerid, "60", low)

//--- 15min
fifteenClose = request.security(syminfo.tickerid, "15", close)
fifteenOpen  = request.security(syminfo.tickerid, "15", open)
fifteenHigh  = request.security(syminfo.tickerid, "15", high)
fifteenLow   = request.security(syminfo.tickerid, "15", low)

//--- 1min (for the 4h branch)
onemClose_4h = request.security(syminfo.tickerid, "1", close)
onemOpen_4h  = request.security(syminfo.tickerid, "1", open)
onemHigh_4h  = request.security(syminfo.tickerid, "1", high)
onemLow_4h   = request.security(syminfo.tickerid, "1", low)

//--- 1min (for the 1h branch)
onemClose_1h = request.security(syminfo.tickerid, "1", close)
onemOpen_1h  = request.security(syminfo.tickerid, "1", open)
onemHigh_1h  = request.security(syminfo.tickerid, "1", high)
onemLow_1h   = request.security(syminfo.tickerid, "1", low)

//--- 10sec
tenSecClose = request.security(syminfo.tickerid, "10S", close)  // May not be supported
tenSecOpen  = request.security(syminfo.tickerid, "10S", open)
tenSecHigh  = request.security(syminfo.tickerid, "10S", high)
tenSecLow   = request.security(syminfo.tickerid, "10S", low)

//---------------------------------------------------
// 3. Evaluate each timeframe’s T2 pattern
//    and store permission booleans
//---------------------------------------------------

//--- DAILY
[ ema10D, ema20D, ema200D,
  restrictedD, bearCandidateD,
  justResetD, permissionD ] =
  f_t2_pattern(dailyClose, dailyOpen, dailyHigh, dailyLow, 10, 20, 200)

//--- 4H (only evaluate if daily has permission)
var bool is4hPerm = false
[ ema10_4H, ema20_4H, ema200_4H,
  restricted4H, bearCandidate4H,
  justReset4H, permission4H ] =
  f_t2_pattern(fhClose, fhOpen, fhHigh, fhLow, 10, 20, 200)
is4hPerm := permissionD and permission4H

//--- 1H (also only evaluate if daily has permission)
var bool is1hPerm = false
[ ema10_1H, ema20_1H, ema200_1H,
  restricted1H, bearCandidate1H,
  justReset1H, permission1H ] =
  f_t2_pattern(onehClose, onehOpen, onehHigh, onehLow, 10, 20, 200)
is1hPerm := permissionD and permission1H

//--- 15min (depends on 4H permission)
var bool is15mPerm = false
[ ema10_15m, ema20_15m, ema200_15m,
  restricted15m, bearCandidate15m,
  justReset15m, permission15m ] =
  f_t2_pattern(fifteenClose, fifteenOpen, fifteenHigh, fifteenLow, 10, 20, 200)
is15mPerm := is4hPerm and permission15m

//--- 1min (branch under 4H)
var bool is1mPerm_4h = false
[ ema10_1m_4h, ema20_1m_4h, ema200_1m_4h,
  restricted1m_4h, bearCandidate1m_4h,
  justReset1m_4h, permission1m_4h ] =
  f_t2_pattern(onemClose_4h, onemOpen_4h, onemHigh_4h, onemLow_4h, 10, 20, 200)
is1mPerm_4h := is4hPerm and permission1m_4h

//--- 1min (branch under 1H)
var bool is1mPerm_1h = false
[ ema10_1m_1h, ema20_1m_1h, ema200_1m_1h,
  restricted1m_1h, bearCandidate1m_1h,
  justReset1m_1h, permission1m_1h ] =
  f_t2_pattern(onemClose_1h, onemOpen_1h, onemHigh_1h, onemLow_1h, 10, 20, 200)
is1mPerm_1h := is1hPerm and permission1m_1h

//--- 10sec (branch under 1H)
var bool is10sPerm = false
[ ema10_10s, ema20_10s, ema200_10s,
  restricted10s, bearCandidate10s,
  justReset10s, permission10s ] =
  f_t2_pattern(tenSecClose, tenSecOpen, tenSecHigh, tenSecLow, 10, 20, 200)
is10sPerm := is1hPerm and permission10s

//---------------------------------------------------
// 4. Plot or label signals
//---------------------------------------------------

// For demonstration, label each timeframe’s “permission” when it happens
// (This is optional and purely for illustration.)
if barstate.isconfirmed
    // Label if daily gave permission
    if permissionD
        label.new(bar_index, high, style=label.style_label_down, color=color.green, textcolor=color.white, text="Daily Permission")

    // Label if 4h fired and daily permission was true
    if is4hPerm
        label.new(bar_index, high, style=label.style_label_down, color=color.fuchsia, textcolor=color.white, text="4H Permission")

    // Label if 1h fired and daily permission was true
    if is1hPerm
        label.new(bar_index, high, style=label.style_label_down, color=color.yellow, textcolor=color.black, text="1H Permission")

    // Label if 15m fired and 4H permission was true
    if is15mPerm
        label.new(bar_index, high, style=label.style_label_down, color=color.aqua, textcolor=color.black, text="15m Permission")

    // Label if 1m (4H branch) fired
    if is1mPerm_4h
        label.new(bar_index, high, style=label.style_label_down, color=color.orange, textcolor=color.black, text="1m-4H")

    // Label if 1m (1H branch) fired
    if is1mPerm_1h
        label.new(bar_index, high, style=label.style_label_down, color=color.navy, textcolor=color.white, text="1m-1H")

    // Label if 10s fired (1H branch)
    if is10sPerm
        label.new(bar_index, high, style=label.style_label_down, color=color.gray, textcolor=color.white, text="10s-1H")

// Optionally, plot the EMAs of the current chart’s timeframe
// (Not the higher or lower ones requested via security)
emaLen10  = 10
emaLen20  = 20
emaLen200 = 200
ema10  = ta.ema(close, emaLen10)
ema20  = ta.ema(close, emaLen20)
ema200 = ta.ema(close, emaLen200)

plot(ema10,  color=color.blue,   title="EMA 10 (Local)")
plot(ema20,  color=color.red,    title="EMA 20 (Local)")
plot(ema200, color=color.orange, title="EMA 200 (Local)")
