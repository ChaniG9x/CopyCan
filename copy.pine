//@version=5
indicator("Tier 2 Pattern with Cascading Gates (CAPA)", overlay=true, shorttitle="T2DP_Cascaded")

// Plot EMAs on the chart
ema10_main  = ta.ema(close, 10)
ema20_main  = ta.ema(close, 20)
ema200_main = ta.ema(close, 200)
plot(ema10_main, title="EMA 10", color=color.blue)
plot(ema20_main, title="EMA 20", color=color.red)
plot(ema200_main, title="EMA 200", color=color.orange)

// Helper function
crosses(_ema) =>
    (low < _ema) and (high > _ema)

// Updated stateful Tier 2 pattern detection function
f_tier2Pattern() =>
    // EMA calculations
    emaLen10  = 10
    emaLen20  = 20
    emaLen200 = 200
    ema10  = ta.ema(close, emaLen10)
    ema20  = ta.ema(close, emaLen20)
    ema200 = ta.ema(close, emaLen200)
    // Check EMA hierarchy
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)
    
    // Persistent state variables
    var bool restricted       = false
    var bool bearishCandidate = false
    var bool justReset        = false
    var bool permission       = false
    
    // Reset justReset at the start of each bar
    justReset := false

    // If restricted, check for reset
    if restricted
        if (close > open) and (close > ema10)
            restricted       := false
            justReset        := true
            bearishCandidate := false
            permission       := false

    // Run pattern detection only if not restricted, not reset, and trend ok
    if not restricted and not justReset and emaTrendOk
        condA = (close > open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        condBearCandidate = (close < open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        if condBearCandidate
            bearishCandidate := true
        condBConfirm = bearishCandidate and (close > open) and (close > ema10)
        if condA or condBConfirm
            permission       := true
            bearishCandidate := false

    // Check for restriction trigger
    if not restricted and not justReset
        if (open < ema20) or (close < ema20)
            restricted       := true
            bearishCandidate := false

    // Final result: only true if permission is granted, bar confirmed, and not restricted
    result = permission and barstate.isconfirmed and (not restricted)
    if result
        permission := false
    result

// --- Persistent variables for each timeframe state ---
var bool daily_pattern_active    = false
var bool fourh_pattern_active    = false
var bool oneh_pattern_active     = false
var bool fifteenm_pattern_active = false
var bool onem_pattern_active     = false
var bool tens_pattern_active     = false

// --- Higher timeframe state passing ---
// Convert booleans to 1/0 and fetch on lower timeframe
dailyConfirmed_pass  = request.security(syminfo.tickerid, "D",   daily_pattern_active ? 1 : 0, lookahead=barmerge.lookahead_on) == 1
fourhConfirmed_pass  = request.security(syminfo.tickerid, "240", fourh_pattern_active ? 1 : 0, lookahead=barmerge.lookahead_on) == 1
onehConfirmed_pass   = request.security(syminfo.tickerid, "60",  oneh_pattern_active ? 1 : 0, lookahead=barmerge.lookahead_on) == 1

// --- Update pattern states per timeframe ---

// Daily timeframe
if timeframe.isdaily
    dailyResult = f_tier2Pattern()
    if dailyResult
        daily_pattern_active := true
        label.new(bar_index, high, "D", style=label.style_label_down, color=color.green, textcolor=color.white)
    else if barstate.isconfirmed
        daily_pattern_active := false
// Else: on lower timeframes, daily_pattern_active is fetched above

// 4-hour timeframe
if timeframe.isintraday and timeframe.multiplier == 240
    fourhResult = f_tier2Pattern()
    if fourhResult and daily_pattern_active
        fourh_pattern_active := true
        label.new(bar_index, high, "4h", style=label.style_label_down, color=color.orange, textcolor=color.white)
    else if barstate.isconfirmed
        fourh_pattern_active := false
// Else: fetch state via request.security

// 1-hour timeframe
if timeframe.isintraday and timeframe.multiplier == 60
    onehResult = f_tier2Pattern()
    if onehResult and daily_pattern_active
        oneh_pattern_active := true
        label.new(bar_index, high, "1h", style=label.style_label_down, color=color.red, textcolor=color.white)
    else if barstate.isconfirmed
        oneh_pattern_active := false
// Else: fetch state via request.security

// 15-minute timeframe
if timeframe.isintraday and timeframe.multiplier == 15
    fifteenmResult = f_tier2Pattern()
    if fifteenmResult and fourh_pattern_active
        fifteenm_pattern_active := true
        label.new(bar_index, low, "15m", style=label.style_label_up, color=color.orange, textcolor=color.white)
    else if barstate.isconfirmed
        fifteenm_pattern_active := false
// Else: fetch state via request.security

// 1-minute timeframe
if timeframe.isintraday and timeframe.multiplier == 1
    onemResult = f_tier2Pattern()
    if onemResult and (fourh_pattern_active or oneh_pattern_active)
        onem_pattern_active := true
        label.new(bar_index, low, "1m", style=label.style_label_up, color=color.red, textcolor=color.white)
    else if barstate.isconfirmed
        onem_pattern_active := false
// Else: fetch state via request.security

// 10-second timeframe
if timeframe.isseconds and timeframe.multiplier == 10
    tensResult = f_tier2Pattern()
    if tensResult and oneh_pattern_active
        tens_pattern_active := true
        label.new(bar_index, high, "10s", style=label.style_label_left, color=color.red, textcolor=color.white)
    else if barstate.isconfirmed
        tens_pattern_active := false
// Else: fetch state via request.security

// --- Debug Information ---
var label debugLabel = na
if barstate.islast
    label.delete(debugLabel)
    debugInfo = "Current TF: " + timeframe.period + 
               "\nDaily Active: " + str.tostring(daily_pattern_active) + 
               "\n4h Active: " + str.tostring(fourh_pattern_active) +
               "\n1h Active: " + str.tostring(oneh_pattern_active) +
               "\n15m Active: " + str.tostring(fifteenm_pattern_active) +
               "\n1m Active: " + str.tostring(onem_pattern_active) +
               "\n10s Active: " + str.tostring(tens_pattern_active)
    debugLabel := label.new(bar_index, low - (low * 0.03), debugInfo, 
                            style=label.style_label_up, 
                            color=color.gray, 
                            textcolor=color.white,
                            size=size.small)
