//@version=5
indicator("Tier 2 Pattern with Cascading Gates (CAPA)", overlay=true, shorttitle="T2DP_Cascaded")

// --------------------------------------------------------
// 1. Plot the local chart's EMAs (for visual reference)
// --------------------------------------------------------
ema10_main  = ta.ema(close, 10)
ema20_main  = ta.ema(close, 20)
ema200_main = ta.ema(close, 200)
plot(ema10_main, title="EMA 10", color=color.blue)
plot(ema20_main, title="EMA 20", color=color.red)
plot(ema200_main, title="EMA 200", color=color.orange)

// --------------------------------------------------------
// 2. Helper function to detect if current candle crosses an EMA
// --------------------------------------------------------
crosses(_ema) =>
    (low < _ema) and (high > _ema)

// --------------------------------------------------------
// 3. Tier 2 Pattern function for a single timeframe
// --------------------------------------------------------
f_tier2Pattern() =>
    // EMA calculations
    emaLen10  = 10
    emaLen20  = 20
    emaLen200 = 200

    ema10  = ta.ema(close, emaLen10)
    ema20  = ta.ema(close, emaLen20)
    ema200 = ta.ema(close, emaLen200)

    // EMA hierarchy: 10 > 20 > 200
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)

    // Persistent variables
    var bool restricted       = false
    var bool bearishCandidate = false
    var bool justReset        = false

    // Reset justReset on each bar
    justReset := false

    // If restricted, check if this candle resets restriction
    if restricted
        // Reset if bullish and closes above ema10
        if (close > open) and (close > ema10)
            restricted       := false
            justReset        := true
            bearishCandidate := false

    // Pattern detection runs only if not restricted, not a reset bar, and EMAs are in an uptrend
    var bool permission = false
    if not restricted and not justReset and emaTrendOk
        // Condition A: single bullish candle that crosses EMA10 or EMA20, then closes above EMA10
        condA = (close > open) and (crosses(ema10) or crosses(ema20)) and (close > ema10)

        // Condition B: two-candle sequence
        condBearCandidate = (close < open) and (crosses(ema10) or crosses(ema20)) and (close > ema10)
        if condBearCandidate
            bearishCandidate := true

        condBConfirm = bearishCandidate and (close > open) and (close > ema10)

        // If either condition is met, permission is granted
        if condA or condBConfirm
            permission       := true
            bearishCandidate := false

    // After pattern detection, check if current candle triggers restriction
    if not restricted and not justReset
        if (open < ema20) or (close < ema20)
            restricted       := true
            bearishCandidate := false

    // Final result for this timeframe bar
    // Only true if bar is confirmed, permission is granted, and not restricted
    result = permission and barstate.isconfirmed and not restricted

    // Reset the permission flag for the next bar
    permission := false

    result

// --------------------------------------------------------
// 4. Request the daily, 4h, 1h, 15m, 1m, 10s data
//    by shifting the higher timeframe's result [1]
// --------------------------------------------------------

// --- Daily
dailyPatternRaw = request.security(syminfo.tickerid, "D", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
dailyConfirmed  = dailyPatternRaw[1]  // The previous daily candle's T2 pattern result

// --- 4h
pattern_4h_raw = request.security(syminfo.tickerid, "240", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_4h_prev = pattern_4h_raw[1]  
pattern_4h = dailyConfirmed and pattern_4h_prev

// --- 1h
pattern_1h_raw = request.security(syminfo.tickerid, "60", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_1h_prev = pattern_1h_raw[1]
pattern_1h = dailyConfirmed and pattern_1h_prev

// --- 15m from 4h
pattern_15m_raw = request.security(syminfo.tickerid, "15", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_15m_from4h = pattern_4h and pattern_15m_raw

// --- 1m from 4h
pattern_1m_raw_4h = request.security(syminfo.tickerid, "1", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_1m_from4h = pattern_4h and pattern_1m_raw_4h

// --- 1m from 1h
pattern_1m_raw_1h = request.security(syminfo.tickerid, "1", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_1m_from1h = pattern_1h and pattern_1m_raw_1h

// --- 10s from 1h
pattern_10s_raw_1h = request.security(syminfo.tickerid, "10S", f_tier2Pattern(), lookahead=barmerge.lookahead_off)
pattern_10s_from1h = pattern_1h and pattern_10s_raw_1h

// --------------------------------------------------------
// 5. Plot labels only when the condition turns true this bar
//    (pattern_X and not pattern_X[1])
// --------------------------------------------------------

// A tiny function to detect "just turned true" from false
justTurnedTrue(cond) => cond and not cond[1]

// --- DAILY label
if timeframe.period == "D" and justTurnedTrue(dailyPatternRaw)
    label.new(bar_index, high, "Daily T2", style=label.style_label_down, color=color.green, textcolor=color.white)

// --- 4H label
if timeframe.period == "240" and justTurnedTrue(pattern_4h_raw)
    label.new(bar_index, high, "4H T2", style=label.style_label_down, color=color.orange, textcolor=color.white)

// --- 1H label
if timeframe.period == "60" and justTurnedTrue(pattern_1h_raw)
    label.new(bar_index, high, "1H T2", style=label.style_label_down, color=color.red, textcolor=color.white)

// --- 15m label (this indicates a 15m T2 that is allowed by 4h)
if timeframe.period == "15" and justTurnedTrue(pattern_15m_from4h)
    label.new(bar_index, low, "15m(4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)

// --- 1m label for the 4h branch
if timeframe.period == "1" and justTurnedTrue(pattern_1m_from4h)
    label.new(bar_index, low, "1m(4h)", style=label.style_label_up, color=color.orange, textcolor=color.white)

// --- 1m label for the 1h branch
if timeframe.period == "1" and justTurnedTrue(pattern_1m_from1h)
    label.new(bar_index, low, "1m(1h)", style=label.style_label_up, color=color.red, textcolor=color.white)

// --- 10s label for the 1h branch
if timeframe.period == "10S" and justTurnedTrue(pattern_10s_from1h)
    label.new(bar_index, high, "10s(1h)", style=label.style_label_left, color=color.red, textcolor=color.white)
