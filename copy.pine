//@version=5
indicator("Full Early-Adopter Strategy with Cascading Logic", overlay=true)

// --- Function to determine bullish or bearish status ---
var string monthly_status = ""
var string weekly_status = ""

// Timeframe inputs
monthly_timeframe = "M"
weekly_timeframe = "W"
daily_timeframe = "D"
min1_timeframe = "1"

// --- Monthly Timeframe Calculation ---
var float monthly_prev_green_open = na
var float monthly_prev_red_open = na

// Monthly bar condition checks
monthly_close = request.security(syminfo.tickerid, monthly_timeframe, close)
monthly_open = request.security(syminfo.tickerid, monthly_timeframe, open)
monthly_prev_close = request.security(syminfo.tickerid, monthly_timeframe, close[1])
monthly_prev_open = request.security(syminfo.tickerid, monthly_timeframe, open[1])

// Track previous green and red bar open prices for Monthly
if (monthly_prev_close > monthly_prev_open)  // Last bar was green
    monthly_prev_green_open := monthly_prev_open
else if (monthly_prev_close < monthly_prev_open)  // Last bar was red
    monthly_prev_red_open := monthly_prev_open

// Determine Monthly Bullish/Bearish Status
if (monthly_close > monthly_open and monthly_close > monthly_prev_red_open)
    monthly_status := "Bullish"
else if (monthly_close < monthly_open and monthly_close < monthly_prev_green_open)
    monthly_status := "Bearish"

// --- Weekly Timeframe Calculation ---
var float weekly_prev_green_open = na
var float weekly_prev_red_open = na

// Weekly bar condition checks
weekly_close = request.security(syminfo.tickerid, weekly_timeframe, close)
weekly_open = request.security(syminfo.tickerid, weekly_timeframe, open)
weekly_prev_close = request.security(syminfo.tickerid, weekly_timeframe, close[1])
weekly_prev_open = request.security(syminfo.tickerid, weekly_timeframe, open[1])

// Track previous green and red bar open prices for Weekly
if (weekly_prev_close > weekly_prev_open)  // Last bar was green
    weekly_prev_green_open := weekly_prev_open
else if (weekly_prev_close < weekly_prev_open)  // Last bar was red
    weekly_prev_red_open := weekly_prev_open

// Determine Weekly Bullish/Bearish Status
if (weekly_close > weekly_open and weekly_close > weekly_prev_red_open)
    weekly_status := "Bullish"
else if (weekly_close < weekly_open and weekly_close < weekly_prev_green_open)
    weekly_status := "Bearish"

// --- Display the status in a box on the chart ---

// Create a table to display the status
var table status_table = table.new(position.top_right, 2, 2, border_width=1)

// Update table cells with appropriate labels and statuses
table.cell(status_table, 0, 0, "Monthly", text_color=color.white, bgcolor=color.blue)
table.cell(status_table, 1, 0, "Weekly", text_color=color.white, bgcolor=color.blue)
table.cell(status_table, 0, 1, monthly_status == "Bullish" ? "Bullish" : (monthly_status == "Bearish" ? "Bearish" : ""), text_color=(monthly_status == "Bullish" ? color.green : color.red))
table.cell(status_table, 1, 1, weekly_status == "Bullish" ? "Bullish" : (weekly_status == "Bearish" ? "Bearish" : ""), text_color=(weekly_status == "Bullish" ? color.green : color.red))

// --- EMA Calculations for Current Timeframe ---
ema10 = ta.ema(close, 10)
ema20 = ta.ema(close, 20)
ema50 = ta.ema(close, 50)
ema100 = ta.ema(close, 100)
ema200 = ta.ema(close, 200)

// Plot EMAs
plot(ema10, title="EMA 10", color=color.blue, linewidth=2)
plot(ema20, title="EMA 20", color=color.red, linewidth=2)
plot(ema50, title="EMA 50", color=color.gray, linewidth=2)
plot(ema100, title="EMA 100", color=color.purple, linewidth=2)
plot(ema200, title="EMA 200", color=color.orange, linewidth=2)

// --- Daily Confirmation Logic ---

// Daily bar condition checks
daily_close = request.security(syminfo.tickerid, daily_timeframe, close)
daily_open = request.security(syminfo.tickerid, daily_timeframe, open)
daily_high = request.security(syminfo.tickerid, daily_timeframe, high)
daily_low = request.security(syminfo.tickerid, daily_timeframe, low)
daily_prev_close = request.security(syminfo.tickerid, daily_timeframe, close[1])
daily_prev_open = request.security(syminfo.tickerid, daily_timeframe, open[1])

// Determine if EMAs are aligned on the daily timeframe
ema10_daily = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 10))
ema20_daily = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 20))
ema50_daily = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 50))
ema100_daily = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 100))
ema200_daily = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 200))

emas_aligned_daily = ema10_daily > ema20_daily and ema20_daily > ema50_daily and ema50_daily > ema100_daily and ema100_daily > ema200_daily

// Daily candle conditions
current_bullish = (daily_close > daily_open) and (daily_close > ema10_daily) and (daily_open > ema20_daily)
previous_bearish = (daily_prev_close < daily_prev_open)
previous_condition_met = previous_bearish and (daily_prev_open < daily_close)

// Persistent variable to track daily confirmation
var bool dailyConfirmed = false

// Check daily confirmation conditions at the close of the daily bar
if timeframe.isdaily and barstate.isconfirmed and (monthly_status == "Bullish") and (weekly_status == "Bullish") and emas_aligned_daily and current_bullish and (not previous_bearish or previous_condition_met)
    dailyConfirmed := true
    
    // --- Place the DMOM Label ---
    // Ensure label is only placed once per confirmed bar
    if not na(daily_high)
        label.new(bar_index, daily_high, "DMOM", color=color.green, textcolor=color.white, style=label.style_label_up)
else
    dailyConfirmed := false

// --- Pass Daily Confirmation to 1-Minute Timeframe ---
dailyConfirmed_1min = request.security(syminfo.tickerid, daily_timeframe, dailyConfirmed ? 1 : 0, lookahead=barmerge.lookahead_off) == 1

// --- Debugging Label Logic on 1-Minute Timeframe ---
var label debug_label = na

// 1-Minute EMA calculations
ema10_1min = ta.ema(close, 10)
ema20_1min = ta.ema(close, 20)
ema200_1min = ta.ema(close, 200)

// 1-Minute bar condition checks
min1_close = close
min1_open = open
min1_low = low
min1_high = high

prev_min1_close = close[1]
prev_min1_open = open[1]

// Check if EMAs are aligned on the 1-minute timeframe (10 > 20 > 200)
emas_aligned_1min = ema10_1min > ema20_1min and ema20_1min > ema200_1min

// Additional conditions based on cascading logic
priceAboveEMA10 = min1_close > ema10_1min
isBullishCandle = min1_close > min1_open
priceCrossedEMA10 = (min1_low <= ema10_1min) and (min1_high >= ema10_1min)
resetCondition = (min1_close < ema20_1min)

// Persistent variables
var bool waitForNextBullishCandle = false
var bool waitingForPriceAboveEMA10 = false

// Logic for generating bullish signals
bullishSignal = false

if timeframe.isintraday and timeframe.multiplier == 1 and dailyConfirmed_1min and emas_aligned_1min
    if resetCondition
        // Reset all conditions and set waiting for price to close above EMA10
        bullishSignal := false
        waitForNextBullishCandle := false
        waitingForPriceAboveEMA10 := true
    else
        if waitingForPriceAboveEMA10
            // Wait until price closes above EMA10
            if min1_close > ema10_1min
                waitingForPriceAboveEMA10 := false
            else
                // Do not proceed until price closes above EMA10
                bullishSignal := false
                waitForNextBullishCandle := false
        else
            // Proceed with normal signal generation
            if priceAboveEMA10
                if priceCrossedEMA10
                    if isBullishCandle and barstate.isconfirmed // Check at close of candle
                        bullishSignal := true
                        waitForNextBullishCandle := false
                    else
                        waitForNextBullishCandle := true
                else
                    if waitForNextBullishCandle
                        if isBullishCandle and priceAboveEMA10 and barstate.isconfirmed // Check at close of candle
                            bullishSignal := true
                            waitForNextBullishCandle := false
                        else
                            waitForNextBullishCandle := false
            else
                waitForNextBullishCandle := false

    // Generate the 1-minute label if bullishSignal is true
    if bullishSignal
        debug_label := label.new(bar_index, high + (high - low) * 0.5, "1min MOM", color=color.green, textcolor=color.white, style=label.style_label_up)
