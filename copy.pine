//@version=5
indicator("Tier 2 Pattern (CAPA) - MTF Cascading with Labels", overlay=true, max_labels_count=500)

//----------------------------------------------------
//  HELPER FUNCTIONS
//----------------------------------------------------

// Check if price crosses EMA
crosses(emaVal) => 
    low < emaVal and high > emaVal

// Get EMAs for any timeframe
f_getEMAs(tf) => 
    [
        request.security(syminfo.tickerid, tf, ta.ema(close, 10)),
        request.security(syminfo.tickerid, tf, ta.ema(close, 20)),
        request.security(syminfo.tickerid, tf, ta.ema(close, 200))
    ]

//----------------------------------------------------
//  DAILY LOGIC
//----------------------------------------------------

f_dailyLogic() =>
    var bool restricted = false
    var bool bearCandidate = false
    var bool justReset = false
    
    [e10, e20, e200] = f_getEMAs("D")
    emaTrendOK = e10 > e20 and e20 > e200
    justReset := false
    
    if restricted and (close > open) and (close > e10)
        restricted := false
        justReset := true
        bearCandidate := false
    
    bool permission = false
    if not restricted and not justReset and emaTrendOK
        bool condBear = (close < open) and (crosses(e10) or crosses(e20)) and (close > e10)
        if condBear
            bearCandidate := true
        
        bool condA = (close > open) and (crosses(e10) or crosses(e20)) and (close > e10)
        bool condB = bearCandidate and (close > open) and (close > e10)
        
        if condA or condB
            permission := true
            bearCandidate := false
    
    if not restricted and not justReset and ((open < e20) or (close < e20))
        restricted := true
        bearCandidate := false
    
    bool finalPermission = permission and barstate.isconfirmed and not restricted
    [finalPermission, restricted, bearCandidate, justReset]

[dailyPerm, dailyRestrict, dailyBear, dailyReset] = request.security(syminfo.tickerid, "D", f_dailyLogic())

//----------------------------------------------------
//  4-HOUR LOGIC
//----------------------------------------------------

f_4hLogic() =>
    var bool restricted = false
    var bool bearCandidate = false
    var bool justReset = false
    
    [e10, e20, e200] = f_getEMAs("240")
    emaTrendOK = e10 > e20 and e20 > e200
    justReset := false
    
    if restricted and (close > open) and (close > e10)
        restricted := false
        justReset := true
        bearCandidate := false
    
    bool permission = false
    if not restricted and not justReset and emaTrendOK and dailyPerm
        bool condBear = (close < open) and (crosses(e10) or crosses(e20) and (close > e10)
        if condBear
            bearCandidate := true
        
        bool condA = (close > open) and (crosses(e10) or crosses(e20) and (close > e10)
        bool condB = bearCandidate and (close > open) and (close > e10)
        
        if condA or condB
            permission := true
            bearCandidate := false
    
    if not restricted and not justReset and ((open < e20) or (close < e20))
        restricted := true
        bearCandidate := false
    
    bool finalPermission = permission and barstate.isconfirmed and not restricted
    [finalPermission, restricted, bearCandidate, justReset]

[fourHPerm, fourHRestrict, fourHBear, fourHReset] = request.security(syminfo.tickerid, "240", f_4hLogic())

//----------------------------------------------------
//  1-HOUR LOGIC
//----------------------------------------------------

f_1hLogic() =>
    var bool restricted = false
    var bool bearCandidate = false
    var bool justReset = false
    
    [e10, e20, e200] = f_getEMAs("60")
    emaTrendOK = e10 > e20 and e20 > e200
    justReset := false
    
    if restricted and (close > open) and (close > e10)
        restricted := false
        justReset := true
        bearCandidate := false
    
    bool permission = false
    if not restricted and not justReset and emaTrendOK and dailyPerm
        bool condBear = (close < open) and (crosses(e10) or crosses(e20) and (close > e10)
        if condBear
            bearCandidate := true
        
        bool condA = (close > open) and (crosses(e10) or crosses(e20)) and (close > e10)
        bool condB = bearCandidate and (close > open) and (close > e10)
        
        if condA or condB
            permission := true
            bearCandidate := false
    
    if not restricted and not justReset and ((open < e20) or (close < e20))
        restricted := true
        bearCandidate := false
    
    bool finalPermission = permission and barstate.isconfirmed and not restricted
    [finalPermission, restricted, bearCandidate, justReset]

[oneHPerm, oneHRestrict, oneHBear, oneHReset] = request.security(syminfo.tickerid, "60", f_1hLogic())

//----------------------------------------------------
//  15-MINUTE LOGIC
//----------------------------------------------------

f_15mLogic() =>
    var bool restricted = false
    var bool bearCandidate = false
    var bool justReset = false
    
    [e10, e20, e200] = f_getEMAs("15")
    emaTrendOK = e10 > e20 and e20 > e200
    justReset := false
    
    if restricted and (close > open) and (close > e10)
        restricted := false
        justReset := true
        bearCandidate := false
    
    bool permission = false
    if not restricted and not justReset and emaTrendOK and fourHPerm
        bool condBear = (close < open) and (crosses(e10) or crosses(e20) and (close > e10)
        if condBear
            bearCandidate := true
        
        bool condA = (close > open) and (crosses(e10) or crosses(e20)) and (close > e10)
        bool condB = bearCandidate and (close > open) and (close > e10)
        
        if condA or condB
            permission := true
            bearCandidate := false
    
    if not restricted and not justReset and ((open < e20) or (close < e20))
        restricted := true
        bearCandidate := false
    
    bool finalPermission = permission and barstate.isconfirmed and not restricted
    [finalPermission, restricted, bearCandidate, justReset]

[fifteenPerm, fifteenRestrict, fifteenBear, fifteenReset] = request.security(syminfo.tickerid, "15", f_15mLogic())

//----------------------------------------------------
//  1-MINUTE LOGIC (from 4h)
//----------------------------------------------------

f_1m4hLogic() =>
    var bool restricted = false
    var bool bearCandidate = false
    var bool justReset = false
    
    [e10, e20, e200] = f_getEMAs("1")
    emaTrendOK = e10 > e20 and e20 > e200
    justReset := false
    
    if restricted and (close > open) and (close > e10)
        restricted := false
        justReset := true
        bearCandidate := false
    
    bool permission = false
    if not restricted and not justReset and emaTrendOK and fourHPerm
        bool condBear = (close < open) and (crosses(e10) or crosses(e20) and (close > e10)
        if condBear
            bearCandidate := true
        
        bool condA = (close > open) and (crosses(e10) or crosses(e20)) and (close > e10)
        bool condB = bearCandidate and (close > open) and (close > e10)
        
        if condA or condB
            permission := true
            bearCandidate := false
    
    if not restricted and not justReset and ((open < e20) or (close < e20))
        restricted := true
        bearCandidate := false
    
    bool finalPermission = permission and barstate.isconfirmed and not restricted
    [finalPermission, restricted, bearCandidate, justReset]

[oneM4hPerm, oneM4hRestrict, oneM4hBear, oneM4hReset] = request.security(syminfo.tickerid, "1", f_1m4hLogic())

//----------------------------------------------------
//  1-MINUTE LOGIC (from 1h)
//----------------------------------------------------

f_1m1hLogic() =>
    var bool restricted = false
    var bool bearCandidate = false
    var bool justReset = false
    
    [e10, e20, e200] = f_getEMAs("1")
    emaTrendOK = e10 > e20 and e20 > e200
    justReset := false
    
    if restricted and (close > open) and (close > e10)
        restricted := false
        justReset := true
        bearCandidate := false
    
    bool permission = false
    if not restricted and not justReset and emaTrendOK and oneHPerm
        bool condBear = (close < open) and (crosses(e10) or crosses(e20) and (close > e10)
        if condBear
            bearCandidate := true
        
        bool condA = (close > open) and (crosses(e10) or crosses(e20)) and (close > e10)
        bool condB = bearCandidate and (close > open) and (close > e10)
        
        if condA or condB
            permission := true
            bearCandidate := false
    
    if not restricted and not justReset and ((open < e20) or (close < e20))
        restricted := true
        bearCandidate := false
    
    bool finalPermission = permission and barstate.isconfirmed and not restricted
    [finalPermission, restricted, bearCandidate, justReset]

[oneM1hPerm, oneM1hRestrict, oneM1hBear, oneM1hReset] = request.security(syminfo.tickerid, "1", f_1m1hLogic())

//----------------------------------------------------
//  10-SECOND LOGIC
//----------------------------------------------------

f_10sLogic() =>
    var bool restricted = false
    var bool bearCandidate = false
    var bool justReset = false
    
    [e10, e20, e200] = f_getEMAs("10S")
    emaTrendOK = e10 > e20 and e20 > e200
    justReset := false
    
    if restricted and (close > open) and (close > e10)
        restricted := false
        justReset := true
        bearCandidate := false
    
    bool permission = false
    if not restricted and not justReset and emaTrendOK and oneHPerm
        bool condBear = (close < open) and (crosses(e10) or crosses(e20) and (close > e10))
        if condBear
            bearCandidate := true
        
        bool condA = (close > open) and (crosses(e10) or crosses(e20)) and (close > e10)
        bool condB = bearCandidate and (close > open) and (close > e10)
        
        if condA or condB
            permission := true
            bearCandidate := false
    
    if not restricted and not justReset and ((open < e20) or (close < e20))
        restricted := true
        bearCandidate := false
    
    bool finalPermission = permission and barstate.isconfirmed and not restricted
    [finalPermission, restricted, bearCandidate, justReset]

[tenSPerm, tenSRestrict, tenSBear, tenSReset] = request.security(syminfo.tickerid, "10S", f_10sLogic())

//----------------------------------------------------
//  LABEL DRAWING
//----------------------------------------------------

drawLabel(text, color) =>
    label.new(bar_index, high, text=text, 
     style=label.style_label_down, 
     color=color.new(color, 90), 
     textcolor=color.white, 
     size=size.small)

// Current timeframe labels
if dailyPerm and timeframe.period == "D"
    drawLabel("Daily T2", color.green)

if fourHPerm and timeframe.period == "240"
    drawLabel("4H T2", color.blue)

if oneHPerm and timeframe.period == "60"
    drawLabel("1H T2", color.purple)

if fifteenPerm and timeframe.period == "15"
    drawLabel("15m T2", color.orange)

if oneM4hPerm and timeframe.period == "1"
    drawLabel("1m(4h) T2", color.teal)

if oneM1hPerm and timeframe.period == "1"
    drawLabel("1m(1h) T2", color.fuchsia)

if tenSPerm and timeframe.period == "10S"
    drawLabel("10s T2", color.red)

//----------------------------------------------------
//  EMA PLOTS
//----------------------------------------------------

plot(ta.ema(close, 10), "EMA 10", color.new(color.blue, 0))
plot(ta.ema(close, 20), "EMA 20", color.new(color.red, 0))
plot(ta.ema(close, 200), "EMA 200", color.new(color.orange, 0))
