//@version=5
indicator("Cascading Tier 2 Pattern (CAPA)", overlay=true, shorttitle="CT2DP")

// ----- EMA Calculations and Plots -----
emaLen10  = 10
emaLen20  = 20
emaLen200 = 200

ema10  = ta.ema(close, emaLen10)
ema20  = ta.ema(close, emaLen20)
ema200 = ta.ema(close, emaLen200)

plot(ema10,  title="EMA 10",  color=color.blue)
plot(ema20,  title="EMA 20",  color=color.red)
plot(ema200, title="EMA 200", color=color.orange)

// Check EMA hierarchy condition
emaTrendOk = (ema10 > ema20) and (ema20 > ema200)

// ----- Helper Function -----
// Detect if the candle crosses a given EMA
crosses(emaVal) =>
    (low < emaVal) and (high > emaVal)

// ----- Pattern Detection on the Current Timeframe -----
// We use persistent variables to maintain state across bars
var bool restricted       = false  // True if waiting for a reset candle after restriction
var bool bearishCandidate = false  // True when a bearish candidate pattern is detected
var bool justReset        = false  // True on the bar that exits restriction so that pattern detection is skipped
var bool permission       = false  // True when the pattern is detected on the current bar

// Reset justReset at the start of each new bar
justReset := false

// If we are restricted, check if the current bar resets restriction
if restricted
    if (close > open) and (close > ema10)
        restricted := false
        justReset  := true
        bearishCandidate := false

// Pattern detection only occurs when not restricted and not on the reset bar, and if the EMA trend is valid
if not restricted and not justReset and emaTrendOk
    // Condition A: Single bullish candle that crosses EMA10 or EMA20 and closes above EMA10
    condA = (close > open) and (crosses(ema10) or crosses(ema20)) and (close > ema10)
    
    // Condition B: Two-candle sequence - first a bearish candidate then a bullish confirmation
    condBearCandidate = (close < open) and (crosses(ema10) or crosses(ema20)) and (close > ema10)
    if condBearCandidate
        bearishCandidate := true
    condBConfirm = bearishCandidate and (close > open) and (close > ema10)
    
    // If either condition is met, mark permission true
    if condA or condBConfirm
        permission := true
        bearishCandidate := false

// Check for restriction condition: if open or close is below EMA20 (unless we just reset)
if not restricted and not justReset
    if (open < ema20) or (close < ema20)
        restricted := true
        bearishCandidate := false

// When the candle closes and permission is true (and not restricted), place a label.
// Also, set a flag that will persist for the entire next period.
var bool permissionForNext = false
if barstate.isconfirmed and permission and not restricted
    label.new(bar_index, high, "T2", style=label.style_label_down, color=color.new(color.green, 0), textcolor=color.white)
    permissionForNext := true
else
    permissionForNext := false

// Reset the permission flag for the current bar after processing
permission := false

// ----- Cascading Permission via Higher Timeframes -----
// For lower timeframes, we want to check if the previous closed candle on a higher timeframe
// had the pattern. That permission should persist for the entire subsequent period.
// Here we use request.security to retrieve the higher timeframe's permission flag from the previous bar.
dailyPermission    = request.security(syminfo.tickerid, "D", permissionForNext[1])
hourlyPermission   = request.security(syminfo.tickerid, "60", permissionForNext[1])
fourHourPermission = request.security(syminfo.tickerid, "240", permissionForNext[1])

// ----- Optional Visual Cues for Cascading Permissions -----
// These labels help verify that the higher timeframe permissions are being received
// on a lower timeframe chart. They do not affect the main pattern detection.
if timeframe.multiplier < 1440 and dailyPermission
    label.new(bar_index, low, "DP", style=label.style_label_up, color=color.new(color.blue, 0), textcolor=color.white)
if timeframe.multiplier < 60 and hourlyPermission
    label.new(bar_index, low, "HP", style=label.style_label_up, color=color.new(color.red, 0), textcolor=color.white)
if timeframe.multiplier < 240 and fourHourPermission
    label.new(bar_index, low, "4HP", style=label.style_label_up, color=color.new(color.orange, 0), textcolor=color.white)
