//@version=5
indicator("Tier 2 Pattern with Boolean Cascading Gates (CAPA)", overlay=true, shorttitle="T2DP_Cascaded")

// === PLOT EMAs ===
ema10_main  = ta.ema(close, 10)
ema20_main  = ta.ema(close, 20)
ema200_main = ta.ema(close, 200)
plot(ema10_main, title="EMA 10", color=color.blue)
plot(ema20_main, title="EMA 20", color=color.red)
plot(ema200_main, title="EMA 200", color=color.orange)

// === CROSS CHECK FUNCTION ===
crosses(_ema) =>
    (low < _ema) and (high > _ema)

// === CORE PATTERN FUNCTION ===
f_tier2Pattern() =>
    ema10  = ta.ema(close, 10)
    ema20  = ta.ema(close, 20)
    ema200 = ta.ema(close, 200)
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)

    var bool restricted       = false
    var bool bearishCandidate = false
    var bool justReset        = false
    justReset := false

    if restricted
        if (close > open) and (close > ema10)
            restricted := false
            justReset := true
            bearishCandidate := false

    var bool permission = false
    if not restricted and not justReset and emaTrendOk
        condA = (close > open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        condBearCandidate = (close < open) and ((crosses(ema10)) or (crosses(ema20))) and (close > ema10)
        if condBearCandidate
            bearishCandidate := true
        condBConfirm = bearishCandidate and (close > open) and (close > ema10)
        if condA or condBConfirm
            permission := true
            bearishCandidate := false

    if not restricted and not justReset
        if (open < ema20) or (close < ema20)
            restricted := true
            bearishCandidate := false

    result = permission and barstate.isconfirmed and (not restricted)
    permission := false
    result

// === HIGHER TIMEFRAME BOOLEAN CONFIRMATION FLAGS ===
getPatternBoolean(tf) =>
    ema = request.security(syminfo.tickerid, tf, ta.ema(close, 10))
    condA = request.security(syminfo.tickerid, tf, (close > open) and (low < ema and high > ema) and (close > ema))
    condBbear = request.security(syminfo.tickerid, tf, (close[1] < open[1]) and (low[1] < ema and high[1] > ema))
    condBbull = request.security(syminfo.tickerid, tf, (close > open) and (close > ema))
    confirmed = condA or (condBbear and condBbull)
    // Return PREVIOUS bar's confirmed flag to use as gate
    request.security(syminfo.tickerid, tf, confirmed[1], lookahead=barmerge.lookahead_on)

// === GATED BOOLEAN FLAGS FOR EACH TIMEFRAME ===
dailyConfirmed = getPatternBoolean("D")
h4Confirmed    = getPatternBoolean("240")
h1Confirmed    = getPatternBoolean("60")

// === CURRENT TIMEFRAME DETECTION ===
tf = timeframe.period

// === APPLY BOOLEAN GATES BASED ON TIMEFRAME ===
allowThisTF = 
    tf == "D" ? true :
    (tf == "240" or tf == "60") and dailyConfirmed ? true :
    (tf == "15" or tf == "1") and h4Confirmed ? true :
    tf == "10S" and h1Confirmed ? true : false

// === LABEL FUNCTION ===
plotLabel(cond, yval, txt, col) =>
    if cond
        label.new(bar_index, yval, txt, style=label.style_label_down, color=col, textcolor=color.white)

// === APPLY PATTERNS AND LABELS ===
if allowThisTF and tf == "D" and f_tier2Pattern()
    plotLabel(true, high, "T2", color.green)

if allowThisTF and tf == "240" and f_tier2Pattern()
    plotLabel(true, high, "4h", color.orange)

if allowThisTF and tf == "60" and f_tier2Pattern()
    plotLabel(true, high, "1h", color.red)

if allowThisTF and tf == "15" and f_tier2Pattern()
    label.new(bar_index, low, "15m", style=label.style_label_up, color=color.orange, textcolor=color.white)

if allowThisTF and tf == "1" and f_tier2Pattern()
    label.new(bar_index, low, "1m", style=label.style_label_up, color=color.red, textcolor=color.white)

if allowThisTF and tf == "10S" and f_tier2Pattern()
    label.new(bar_index, high, "10s", style=label.style_label_left, color=color.red, textcolor=color.white)
