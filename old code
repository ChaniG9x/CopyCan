//@version=5
indicator("Tier 2 Pattern with Robust Cascading (CAPA)", overlay=true, shorttitle="T2DP")

// ===========================
// 1. Base T2 Pattern Logic (Stateful)
// ===========================

emaLen10  = 10
emaLen20  = 20
emaLen200 = 200

ema10  = ta.ema(close, emaLen10)
ema20  = ta.ema(close, emaLen20)
ema200 = ta.ema(close, emaLen200)

plot(ema10, title="EMA 10", color=color.blue)
plot(ema20, title="EMA 20", color=color.red)
plot(ema200, title="EMA 200", color=color.orange)

emaTrendOk = (ema10 > ema20) and (ema20 > ema200)

crosses(emaVal) =>
    (low < emaVal) and (high > emaVal)

// State Management for the T2 pattern on the current timeframe
var bool restricted       = false
var bool bearishCandidate = false
var bool justReset        = false

justReset := false

if restricted
    if (close > open) and (close > ema10)
        restricted := false
        justReset  := true
        bearishCandidate := false

var bool permission = false
if not restricted and not justReset and emaTrendOk
    // Condition A: Single bullish candle that crosses EMA10/EMA20 and closes above EMA10
    condA = (close > open) and ((low < ema10 and high > ema10) or (low < ema20 and high > ema20)) and (close > ema10)
    // Condition B: Two-candle sequence (bearish candidate then confirmation)
    condBearCandidate = (close < open) and ((low < ema10 and high > ema10) or (low < ema20 and high > ema20)) and (close > ema10)
    if condBearCandidate
        bearishCandidate := true
    condBConfirm = bearishCandidate and (close > open) and (close > ema10)
    if condA or condBConfirm
        permission := true
        bearishCandidate := false

if not restricted and not justReset
    if (open < ema20) or (close < ema20)
        restricted := true
        bearishCandidate := false

currentT2 = permission and emaTrendOk

// ===========================
// 2. Cascading Logic: Higher Timeframe T2 Status
// ===========================

// Define a simplified T2 condition for cascading purposes.
f_simpleT2() =>
    _ema10  = ta.ema(close, 10)
    _ema20  = ta.ema(close, 20)
    _ema200 = ta.ema(close, 200)
    (_ema10 > _ema20 and _ema20 > _ema200) and (close > open)

// Fetch the previous completed candleâ€™s T2 condition from higher timeframes.
previousDayT2 = request.security(syminfo.tickerid, "D", f_simpleT2(), lookahead=barmerge.lookahead_off)[1]
previous4HT2  = request.security(syminfo.tickerid, "240", f_simpleT2(), lookahead=barmerge.lookahead_off)[1]
previous1HT2  = request.security(syminfo.tickerid, "60", f_simpleT2(), lookahead=barmerge.lookahead_off)[1]

// ===========================
// 3. Cascading Permission Lock-In (New Period Flags)
// ===========================

// Define new period flags: they are true only on the first bar of a new period.
newDay = ta.change(time("D")) != 0
new4H  = ta.change(time("240")) != 0
new1H  = ta.change(time("60")) != 0

var bool cascadePermission = false

if timeframe.isdaily
    // On daily charts, allow permission only on the first bar of a new day.
    cascadePermission := newDay
else if timeframe.isminutes
    // For 1H and 4H charts, grant permission only if it's a new day and the previous daily T2 was true.
    if (timeframe.multiplier == 60 or timeframe.multiplier == 240)
        cascadePermission := newDay and previousDayT2
    // For 15m and 1m charts, grant permission only if it's a new 4H period and the previous 4H T2 was true.
    else if (timeframe.multiplier == 15 or timeframe.multiplier == 1)
        cascadePermission := new4H and previous4HT2
    // For 10-second charts, grant permission only if it's a new 1H period and the previous 1H T2 was true.
    else if (timeframe.multiplier == 10)
        cascadePermission := new1H and previous1HT2

// ===========================
// 4. Plot the T2 Label if All Conditions Are Met
// ===========================
if currentT2 and barstate.isconfirmed and not restricted and cascadePermission
    label.new(x=bar_index, y=high, text="T2", style=label.style_label_down, color=color.new(color.green, 0), textcolor=color.white)

permission := false
