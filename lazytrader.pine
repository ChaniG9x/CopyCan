//@version=5
strategy("Lazy Trader Strategy with Dynamic HTF Price Action Stop + Alerts", 
     overlay=true, 
     default_qty_type=strategy.percent_of_equity, 
     default_qty_value=100)

//---------------------------------------------------------------------
// 1) ALERT / TRADE-RELATED INPUTS
//---------------------------------------------------------------------
accountNumber   = input.string("123456789", title="Account Number")
tickerSymbol    = input.string("EURNZD",    title="Ticker Symbol")
pipSize         = input.float(0.0001,       title="Pip Size")
riskPercentage  = input.float(1.0,          title="Risk Percentage")
contractSize    = input.float(1.0,          title="Contract Size")
stop_loss_buffer_percent = input.float(3.0, "Stop Loss Buffer (%)", minval=0.0, step=0.01, tooltip="Same logic as Sling Shot code. 3.0 = 3% below the EMA.")

//---------------------------------------------------------------------
// 2) PATTERN LOGIC & EMAs
//---------------------------------------------------------------------
// Toggle for T3 pattern
enableT3 = input.bool(true, title="Enable T3 Pattern", tooltip="Check to enable T3 Pattern. Uncheck to disable it.")

// EMAs for structure and logic
ema10   = ta.ema(close, 10)
ema20   = ta.ema(close, 20)
ema50   = ta.ema(close, 50)
ema100  = ta.ema(close, 100)
ema200  = ta.ema(close, 200)

// Plotting EMAs
plot(ema10,  title="EMA 10",  color=color.blue)
plot(ema20,  title="EMA 20",  color=color.red)
plot(ema50,  title="EMA 50",  color=color.gray)
plot(ema100, title="EMA 100", color=color.purple)
plot(ema200, title="EMA 200", color=color.orange)

// Utility to check if a bar crossed an EMA
crosses(_ema) => (low < _ema) and (high > _ema)

// Tier 2 Pattern logic
f_tier2Pattern() =>
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)
    var bool restricted = false
    var bool bearishCandidate = false
    var bool justReset = false
    justReset := false

    if restricted and (close > open) and (close > ema10)
        restricted := false
        justReset := true
        bearishCandidate := false

    var bool permission = false
    if not restricted and not justReset and emaTrendOk
        condA = (close > open) and (crosses(ema10) or crosses(ema20)) and (close > ema10)
        condBearCandidate = (close < open) and (crosses(ema10) or crosses(ema20)) and (close > ema10)
        if condBearCandidate
            bearishCandidate := true
        condBConfirm = bearishCandidate and (close > open) and (close > ema10)
        if condA or condBConfirm
            permission := true
            bearishCandidate := false

    if not restricted and not justReset and ((open < ema20) or (close < ema20))
        restricted := true
        bearishCandidate := false

    result = permission and barstate.isconfirmed and (not restricted)
    permission := false
    result

// Tier 3 Pattern logic
f_tier3Pattern() =>
    emaTrendOk = (ema10 > ema20) and (ema20 > ema200)
    t3Valid = (close > open) and (open > ema10) and (close > ema10) and (low > ema10)
    emaTrendOk and t3Valid and barstate.isconfirmed

// Pattern result flags
patternResult    = f_tier2Pattern()
t3patternResult  = enableT3 ? f_tier3Pattern() : false

//---------------------------------------------------------------------
// 3) HIGHER TIMEFRAME CONFIRMATIONS
//---------------------------------------------------------------------
var bool dailyConfirmed = false
if timeframe.isdaily
    if barstate.isconfirmed
        dailyConfirmed := patternResult
    else
        dailyConfirmed := dailyConfirmed[1]

var bool t3confirmed = false
if timeframe.isdaily
    if barstate.isconfirmed
        t3confirmed := enableT3 ? t3patternResult : false
    else
        t3confirmed := t3confirmed[1]

var bool fourHourConfirmed = false
if timeframe.isintraday and timeframe.multiplier == 240
    if barstate.isconfirmed
        fourHourConfirmed := patternResult
    else
        fourHourConfirmed := fourHourConfirmed[1]

var bool oneHourConfirmed = false
if timeframe.isintraday and timeframe.multiplier == 60
    if barstate.isconfirmed
        oneHourConfirmed := patternResult
    else
        oneHourConfirmed := oneHourConfirmed[1]

// Get HTF confirmations on LTFs
dailyConfirmed_LTF     = request.security(syminfo.tickerid, "D", dailyConfirmed ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
t3confirmed_LTF        = request.security(syminfo.tickerid, "D", t3confirmed ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
fourHourConfirmed_LTF  = request.security(syminfo.tickerid, "240", fourHourConfirmed ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
oneHourConfirmed_LTF   = request.security(syminfo.tickerid, "60", oneHourConfirmed ? 1 : 0, lookahead=barmerge.lookahead_off) == 1

//---------------------------------------------------------------------
// 4) LABELS FOR VISUAL CONFIRMATION
//---------------------------------------------------------------------
// Drawing labels only when patterns trigger on their respective timeframes
if timeframe.period == "D" and patternResult
    label.new(bar_index, high, "T2", style=label.style_label_down, color=color.green, textcolor=color.white)
if enableT3 and timeframe.period == "D" and t3patternResult
    label.new(bar_index, low,  "T3", style=label.style_label_upper_left, color=color.orange, textcolor=color.white)
if timeframe.period == "240" and (dailyConfirmed_LTF or t3confirmed_LTF) and patternResult
    label.new(bar_index, high, "4h", style=label.style_label_down, color=color.orange, textcolor=color.white)
if timeframe.period == "60" and (dailyConfirmed_LTF or t3confirmed_LTF) and patternResult
    label.new(bar_index, high, "1h", style=label.style_label_down, color=color.red, textcolor=color.white)
if timeframe.period == "15" and (((fourHourConfirmed_LTF and dailyConfirmed_LTF) or (fourHourConfirmed_LTF and t3confirmed_LTF)) and patternResult)
    label.new(bar_index, low, "15m", style=label.style_label_up, color=color.orange, textcolor=color.white)
if timeframe.period == "1" and (((oneHourConfirmed_LTF and dailyConfirmed_LTF) or (oneHourConfirmed_LTF and t3confirmed_LTF)) and patternResult)
    label.new(bar_index, low, "1m_1h", style=label.style_label_up, color=color.red, textcolor=color.white)
if timeframe.period == "1" and (((fourHourConfirmed_LTF and dailyConfirmed_LTF) or (fourHourConfirmed_LTF and t3confirmed_LTF)) and patternResult)
    label.new(bar_index, low, "1m_4h", style=label.style_label_upper_right, color=color.purple, textcolor=color.white)
if timeframe.period == "10S" and (((oneHourConfirmed_LTF and dailyConfirmed_LTF) or (oneHourConfirmed_LTF and t3confirmed_LTF)) and patternResult)
    label.new(bar_index, low, "10S", style=label.style_label_up, color=color.olive, textcolor=color.white)

//---------------------------------------------------------------------
// 5) PRICE ACTION LINE (USED FOR TRAILING STOP)
//---------------------------------------------------------------------
selectedTimeframe_PA = input.timeframe("15", title="Select Timeframe for Price Action", options=["1", "15", "10", "60", "240", "D"])
price_action_adjustment_percent = input.float(0.0, "Price Action Line Adjustment (%)", minval=-100, maxval=100, step=0.1)

isGreen_PA(cClose, cOpen) => cClose > cOpen

priceActionLine_HTF() =>
    var float base_priceActionLine = na
    if barstate.isconfirmed
        if isGreen_PA(close, open)
            if close > high[1]
                base_priceActionLine := low
            else if (close > open[1]) and (close[1] < open[1])
                base_priceActionLine := low
            else
                base_priceActionLine := na
        else
            base_priceActionLine := na
    base_priceActionLine

priceActionLine_base = request.security(syminfo.tickerid, selectedTimeframe_PA, priceActionLine_HTF(), lookahead=barmerge.lookahead_off)
priceActionLine = not na(priceActionLine_base) ? priceActionLine_base * (1 + price_action_adjustment_percent / 100) : na
plot(priceActionLine, color=color.green, title="Price Action Line", linewidth=2)

//---------------------------------------------------------------------
// 6) ENTRY CONDITIONS + CUSTOM STOP LOSS PER TIMEFRAME (15m only)
//---------------------------------------------------------------------
var float trailing_stop         = na
var float fixed_stop_loss_level = na
var float stop_level            = na

shouldEnter = false
entryLabel  = ""

// Entry triggers for each timeframe
if timeframe.period == "15" and (((fourHourConfirmed_LTF and dailyConfirmed_LTF) or (fourHourConfirmed_LTF and t3confirmed_LTF)) and patternResult)
    shouldEnter := true
    entryLabel  := "Buy_15m"
if timeframe.period == "1" and (((oneHourConfirmed_LTF and dailyConfirmed_LTF) or (oneHourConfirmed_LTF and t3confirmed_LTF)) and patternResult)
    shouldEnter := true
    entryLabel  := "Buy_1m"
if timeframe.period == "10S" and (((oneHourConfirmed_LTF and dailyConfirmed_LTF) or (oneHourConfirmed_LTF and t3confirmed_LTF)) and patternResult)
    shouldEnter := true
    entryLabel  := "Buy_10s"

// Place entry order + calculate initial stop loss
if shouldEnter and strategy.position_size == 0
    // Custom logic for 15m timeframe only
    if timeframe.period == "15"
        crossed_20ema_15m = crosses(ema20)
        stop_ema_15m = crossed_20ema_15m ? ema50 : ema20
        fixed_stop_loss_level := stop_ema_15m * (1.0 - stop_loss_buffer_percent / 100)
    else
        fixed_stop_loss_level := ema200 * (1.0 - stop_loss_buffer_percent / 100)

    // Risk-based sizing
    distanceToStopLoss = math.abs(close - fixed_stop_loss_level)
    distanceToStopLoss := distanceToStopLoss > 0 ? distanceToStopLoss : 0.0001
    riskAmount   = 100000 * (riskPercentage / 100)
    positionSize = riskAmount / distanceToStopLoss
    volume       = positionSize / contractSize

    entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
    strategy.entry(entryLabel, strategy.long, qty=positionSize, alert_message=entryAlertMessage)
    alert(entryAlertMessage, alert.freq_once_per_bar_close)
    trailing_stop := na

//---------------------------------------------------------------------
// 7) TRAILING STOP MANAGEMENT (SHARED)
//---------------------------------------------------------------------
if strategy.position_size > 0
    inProfit = not na(priceActionLine) and (priceActionLine > strategy.position_avg_price)
    if inProfit
        trailing_stop := na(trailing_stop) ? priceActionLine : math.max(trailing_stop, priceActionLine)
    stop_level := nz(trailing_stop, fixed_stop_loss_level)
    strategy.exit("Stop", stop=stop_level, alert_message=accountNumber + ",closelong," + tickerSymbol)

//---------------------------------------------------------------------
// 8) ALERT WHEN STOP LOSS TRIGGERS
//---------------------------------------------------------------------
var bool wasInPosition = false
stop_triggered = wasInPosition and (strategy.position_size == 0) and (close <= stop_level)

if stop_triggered
    alert("Stop loss triggered for " + tickerSymbol, alert.freq_once_per_bar_close)

wasInPosition := strategy.position_size > 0
plot(strategy.position_size > 0 ? stop_level : na, title="Stop Level", color=color.yellow)
