//@version=5
indicator("Tier 2 Pattern with Cascading (CAPA)", overlay=true, shorttitle="T2DP")

// ===========================
// 1. Base T2 Pattern Logic (Stateful)
// ===========================

// EMA lengths and calculations
emaLen10  = 10
emaLen20  = 20
emaLen200 = 200

ema10  = ta.ema(close, emaLen10)
ema20  = ta.ema(close, emaLen20)
ema200 = ta.ema(close, emaLen200)

// Plot EMAs with specified colors
plot(ema10, title="EMA 10", color=color.blue)
plot(ema20, title="EMA 20", color=color.red)
plot(ema200, title="EMA 200", color=color.orange)

// Check EMA hierarchy condition: EMA10 > EMA20 > EMA200
emaTrendOk = (ema10 > ema20) and (ema20 > ema200)

// A helper function to detect if the candle crosses a given EMA
crosses(emaVal) =>
    (low < emaVal) and (high > emaVal)

// --- State Management for T2 pattern ---
var bool restricted       = false  // True if we are restricted due to low open/close
var bool bearishCandidate = false  // Set when a bearish candidate pattern is detected (waiting for confirmation)
var bool justReset        = false  // True on the bar that resets the restriction

// Reset justReset at the start of each bar
justReset := false

// If currently restricted, check if this candle resets restriction (bullish close above ema10)
if restricted
    if (close > open) and (close > ema10)
        restricted := false
        justReset  := true
        bearishCandidate := false

// Evaluate T2 pattern only if not restricted and not just reset, and EMA trend is OK
var bool permission = false
if not restricted and not justReset and emaTrendOk
    // Condition A: Single bullish candle (crossing ema10 or ema20 and closing above ema10)
    condA = (close > open) and (((low < ema10 and high > ema10) or (low < ema20 and high > ema20))) and (close > ema10)
    // Condition B: Two-candle sequence (bearish candidate then bullish confirmation)
    condBearCandidate = (close < open) and (((low < ema10 and high > ema10) or (low < ema20 and high > ema20))) and (close > ema10)
    if condBearCandidate
        bearishCandidate := true
    condBConfirm = bearishCandidate and (close > open) and (close > ema10)
    if condA or condBConfirm
        permission := true
        bearishCandidate := false

// After pattern detection, if candle's open or close is below ema20, become restricted.
if not restricted and not justReset
    if (open < ema20) or (close < ema20)
        restricted := true
        bearishCandidate := false

// Current T2 condition on this chart:
currentT2 = permission and emaTrendOk

// ===========================
// 2. Cascading Logic: Get Higher Timeframe T2 Status
// ===========================

// For cascading purposes we use a simplified T2 condition: 
// (EMA alignment and bullish candle)
// This function is used solely to determine the permission flag from higher timeframes.
f_simpleT2() =>
    _ema10 = ta.ema(close, 10)
    _ema20 = ta.ema(close, 20)
    _ema200 = ta.ema(close, 200)
    (_ema10 > _ema20 and _ema20 > _ema200) and (close > open)

// Request previous higher timeframe status (using offset [1] for the previous completed candle)
previousDayT2 = request.security(syminfo.tickerid, "D", f_simpleT2(), lookahead=barmerge.lookahead_off)[1]
previous4HT2  = request.security(syminfo.tickerid, "240", f_simpleT2(), lookahead=barmerge.lookahead_off)[1]
previous1HT2  = request.security(syminfo.tickerid, "60", f_simpleT2(), lookahead=barmerge.lookahead_off)[1]

// ===========================
// 3. Determine Cascading Permission Based on Current Chart Timeframe
// ===========================

// We want the permission to "lock in" only at the start of a new higher timeframe period.
var bool cascadePermission = false

// Define new period flags for higher timeframes
newDay = ta.change(time("D"))
new4H  = ta.change(time("240"))
new1H  = ta.change(time("60"))

if timeframe.isdaily
    // On daily charts, no cascading dependency is needed.
    cascadePermission := newDay
else if timeframe.isminutes
    // For 1H and 4H charts, require previous daily T2 status, and only on the first bar of a new day.
    if (timeframe.multiplier == 60 or timeframe.multiplier == 240)
        cascadePermission := newDay and previousDayT2
    // For 15m and 1m charts, require previous 4H T2 status, and only on the first bar of a new 4H period.
    else if (timeframe.multiplier == 15 or timeframe.multiplier == 1)
        cascadePermission := new4H and previous4HT2
    // For 10-second charts (if available), require previous 1H T2 status, and only on the first bar of a new 1H period.
    else if (timeframe.multiplier == 10)
        cascadePermission := new1H and previous1HT2

// ===========================
// 4. Plot the Label if All Conditions Are Met
// ===========================
if currentT2 and cascadePermission and barstate.isconfirmed and not restricted
    label.new(x=bar_index, y=high, text="T2", style=label.style_label_down, color=color.new(color.green, 0), textcolor=color.white)

// Reset permission for the next bar
permission := false
