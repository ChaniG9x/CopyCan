//@version=5
strategy("Tier 2 Daily Pattern Strategy", overlay=true, shorttitle="T2DP", calc_on_every_tick=false)

// ----------------------------
// COMMON CALCULATIONS & FUNCTIONS
// ----------------------------

// Determine if the current chart is daily
isDaily = timeframe.isdaily

// EMA lengths
emaLen10  = 10
emaLen20  = 20
emaLen200 = 200

// Calculate EMAs
ema10  = ta.ema(close, emaLen10)
ema20  = ta.ema(close, emaLen20)
ema200 = ta.ema(close, emaLen200)

// Plot EMAs
plot(ema10, title="EMA 10", color=color.blue)
plot(ema20, title="EMA 20", color=color.red)
plot(ema200, title="EMA 200", color=color.orange)

// Ensure labels are only drawn when EMA 10 > EMA 20 and EMA 20 > EMA200
emaTrendOk = (ema10 > ema20) and (ema20 > ema200)

// Function to check if a candle crosses an EMA value
crosses(emaVal) =>
    (low < emaVal) and (high > emaVal)

// ----------------------------
// COMMON T2/T3 LOGIC (applies on all timeframes)
// ----------------------------

// Variables used in the logic
var bool restricted       = false
var bool bearishCandidate = false
var bool justReset        = false
var bool t2Triggered      = false

justReset := false

// Reset restriction if the current candle is bullish and above ema10
if restricted
    if (close > open) and (close > ema10)
        restricted       := false
        justReset        := true
        bearishCandidate := false

t2Triggered := false
var bool permission = false

// Evaluate T2 conditions (applied on every chart)
if not restricted and not justReset and emaTrendOk
    // Direct Bullish Signal (condA)
    condA = (close > open) and (crosses(ema10) or crosses(ema20)) and (close > ema10)
    // Bearish Candidate turning Bullish
    condBearCandidate = (close < open) and (crosses(ema10) or crosses(ema20)) and (close > ema10)
    if condBearCandidate
        bearishCandidate := true
    condBConfirm = bearishCandidate and (close > open) and (close > ema10)
    if condA or condBConfirm
        permission       := true
        bearishCandidate := false

// Apply restriction if candle opens or closes below ema20
if not restricted and not justReset
    if (open < ema20) or (close < ema20)
        restricted       := true
        bearishCandidate := false

// ----------------------------
// DAILY SIGNAL LOGIC
// ----------------------------

// dailySignal: 0 = none, 2 = T2, 3 = T3
var int dailySignal = 0

if isDaily
    // At the beginning of a new daily candle, reset dailySignal.
    if ta.change(time("D"))
        dailySignal := 0

    if permission and barstate.isconfirmed and emaTrendOk
        label.new(x=bar_index, y=high, text="T2", style=label.style_label_down, 
                  color=color.new(color.green, 0), textcolor=color.white)
        t2Triggered := true
        dailySignal := 2

    // Reset permission after daily T2 label has been drawn
    permission := false

    // Daily T3 logic (only on daily timeframe)
    var bool permissionT3 = false
    permissionT3 := (close > open) and (open > ema10) and (close > ema10)
    if permissionT3 and barstate.isconfirmed and not t2Triggered and emaTrendOk
        label.new(x=bar_index, y=high, text="T3", style=label.style_label_down, 
                  color=color.new(color.orange, 0), textcolor=color.white)
        dailySignal := 3

// ----------------------------
// 1‑HOUR SIGNAL LOGIC
// ----------------------------

var int oneHourSignal = 0
if timeframe.period == "60"
    // Reset oneHourSignal at the start of a new 1‑hour candle.
    if ta.change(time("60"))
        oneHourSignal := 0

    if permission and barstate.isconfirmed and emaTrendOk
        label.new(x=bar_index, y=high, text="T2_1h", style=label.style_label_down, 
                  color=color.new(color.green, 0), textcolor=color.white)
        oneHourSignal := 2
        permission := false

// ----------------------------
// 4‑HOUR SIGNAL LOGIC
// ----------------------------

var int fourHourSignal = 0
if timeframe.period == "240"
    // Reset fourHourSignal at the start of a new 4‑hour candle.
    if ta.change(time("240"))
        fourHourSignal := 0

    if permission and barstate.isconfirmed and emaTrendOk
        label.new(x=bar_index, y=high, text="T2_4h", style=label.style_label_down, 
                  color=color.new(color.green, 0), textcolor=color.white)
        fourHourSignal := 2
        permission := false

// ----------------------------
// LOWER TIMEFRAME ENTRIES & LABELS
// ----------------------------

// Retrieve previous higher timeframe signals using request.security with lookahead off.
oneHourPerm = request.security(syminfo.tickerid, "60", oneHourSignal[1], lookahead=barmerge.lookahead_off)
fourHourPerm = request.security(syminfo.tickerid, "240", fourHourSignal[1], lookahead=barmerge.lookahead_off)

// For 15‑minute signals: permitted if either the 4‑hour or the 1‑hour signal is nonzero.
if (timeframe.period == "15") and ((fourHourPerm != 0) or (oneHourPerm != 0)) and barstate.isconfirmed and emaTrendOk and permission
    label.new(x=bar_index, y=high, text="INT", style=label.style_label_down, 
              color=color.new(color.orange, 0), textcolor=color.white)
    strategy.entry("Entry_15min", strategy.long)
    permission := false
    // Place a trailing stop below the 200EMA.
    strategy.exit("Exit_15min", "Entry_15min", stop=ema200)

// For 1‑minute signals: permitted by the 1‑hour signal.
if (timeframe.period == "1") and (oneHourPerm != 0) and barstate.isconfirmed and emaTrendOk and permission
    label.new(x=bar_index, y=high, text="1min", style=label.style_label_down, 
              color=color.new(color.blue, 0), textcolor=color.white)
    strategy.entry("Entry_1min", strategy.long)
    permission := false
    strategy.exit("Exit_1min", "Entry_1min", stop=ema200)

// For 10‑second signals: permitted by the 1‑hour signal.
if (timeframe.period == "10S") and (oneHourPerm != 0) and barstate.isconfirmed and emaTrendOk and permission
    label.new(x=bar_index, y=high, text="SCP", style=label.style_label_down, 
              color=color.new(color.red, 0), textcolor=color.white)
    strategy.entry("Entry_10S", strategy.long)
    permission := false
    strategy.exit("Exit_10S", "Entry_10S", stop=ema200)
