//@version=5
indicator("Tier 2 Pattern with Robust Cascading (CAPA)", overlay=true, shorttitle="T2DP")

// ===========================
// 1. Base T2 Pattern Logic (Stateful)
// ===========================

emaLen10  = 10
emaLen20  = 20
emaLen200 = 200

ema10  = ta.ema(close, emaLen10)
ema20  = ta.ema(close, emaLen20)
ema200 = ta.ema(close, emaLen200)

plot(ema10, title="EMA 10", color=color.blue)
plot(ema20, title="EMA 20", color=color.red)
plot(ema200, title="EMA 200", color=color.orange)

emaTrendOk = (ema10 > ema20) and (ema20 > ema200)
crosses(emaVal) =>
    (low < emaVal) and (high > emaVal)

// State Management for T2 pattern
var bool restricted       = false  // Restricted due to low open/close
var bool bearishCandidate = false  // Flag for bearish candidate awaiting confirmation
var bool justReset        = false  // Flag for the bar that resets restriction

justReset := false

if restricted
    if (close > open) and (close > ema10)
        restricted := false
        justReset  := true
        bearishCandidate := false

var bool permission = false
if not restricted and not justReset and emaTrendOk
    // Condition A: Single bullish candle (crossing ema10/ema20 and closing above ema10)
    condA = (close > open) and (((low < ema10 and high > ema10) or (low < ema20 and high > ema20))) and (close > ema10)
    // Condition B: Two-candle sequence (bearish candidate then bullish confirmation)
    condBearCandidate = (close < open) and (((low < ema10 and high > ema10) or (low < ema20 and high > ema20))) and (close > ema10)
    if condBearCandidate
        bearishCandidate := true
    condBConfirm = bearishCandidate and (close > open) and (close > ema10)
    if condA or condBConfirm
        permission := true
        bearishCandidate := false

if not restricted and not justReset
    if (open < ema20) or (close < ema20)
        restricted := true
        bearishCandidate := false

currentT2 = permission and emaTrendOk

// ===========================
// 2. Cascading Logic: Get Higher Timeframe T2 Status
// ===========================

// Define a simplified T2 condition function for cascading
f_simpleT2() =>
    _ema10 = ta.ema(close, 10)
    _ema20 = ta.ema(close, 20)
    _ema200 = ta.ema(close, 200)
    (_ema10 > _ema20 and _ema20 > _ema200) and (close > open)

// Use request.security with offset [1] to get the previous completed candle's T2 status
previousDayT2 = request.security(syminfo.tickerid, "D", f_simpleT2(), lookahead=barmerge.lookahead_off)[1]
previous4HT2  = request.security(syminfo.tickerid, "240", f_simpleT2(), lookahead=barmerge.lookahead_off)[1]
previous1HT2  = request.security(syminfo.tickerid, "60", f_simpleT2(), lookahead=barmerge.lookahead_off)[1]

// ===========================
// 3. Determine Cascading Permission (Locking in Only on New Periods)
// ===========================

// New period flags: these are true only on the first bar of a new period
newDay = ta.change(time("D")) != 0
new4H  = ta.change(time("240")) != 0
new1H  = ta.change(time("60")) != 0

var bool cascadePermission = false

if timeframe.isdaily
    // Daily charts always have permission on the new day
    cascadePermission := newDay
else if timeframe.isminutes
    // For 1H and 4H charts, grant permission only if a new day has begun and the previous daily T2 condition was met
    if (timeframe.multiplier == 60 or timeframe.multiplier == 240)
        cascadePermission := newDay and previousDayT2
    // For 15m and 1m charts, grant permission only if a new 4H period has begun and the previous 4H T2 condition was met
    else if (timeframe.multiplier == 15 or timeframe.multiplier == 1)
        cascadePermission := new4H and previous4HT2
    // For 10-second charts (if available), grant permission only if a new 1H period has begun and the previous 1H T2 condition was met
    else if (timeframe.multiplier == 10)
        cascadePermission := new1H and previous1HT2

// ===========================
// 4. Plot the T2 Label if All Conditions Are Met
// ===========================
if currentT2 and cascadePermission and barstate.isconfirmed and not restricted
    label.new(x=bar_index, y=high, text="T2", style=label.style_label_down, color=color.new(color.green, 0), textcolor=color.white)

permission := false
