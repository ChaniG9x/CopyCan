//@version=5
strategy("Full Early-Adopter Strategy with Cascading Logic, Extra EMAs, and Fallback Red Trigger", overlay=true, pyramiding=0)

// --- Ticker Symbol Input ---
tickerSymbol = input.string("EURNZD", title="Ticker Symbol", tooltip="Enter the ticker symbol for alerts (e.g., EURNZD, EURUSD, GBPUSD, SPX, XAUUSD)")

// --- Pip Size Input ---
pipSize = input.float(0.0001, title="Pip Size", tooltip="Define the pip size based on the asset type (e.g., 0.0001 for Forex, 1 for Indices, 0.01 for Commodities)")

// --- Position Sizing for Percentage Risk ---
riskPercentage = input.float(1.0, "Risk Percentage per Trade", minval=0.1, maxval=100, step=0.1)

// --- Contract Size Input ---
contractSize = input.float(1.0, title="Contract Size", tooltip="Enter the contract size as defined in your strategy input tabs")

// --- Initial Stop Loss Percentage Above EMA200 ---
initial_stop_loss_percent = input.float(0.03, "Initial Stop Loss Percentage Above EMA200 (%)", minval=0.0, step=0.01, tooltip="Set the initial stop loss percentage above the EMA200. Default is 0.03%.")

// --- Configurable Trading Windows (Hours + Minutes) ---
start_hour_1   = input.int(7,  title="Start Hour for Session 1 (0-23)",  minval=0, maxval=23)
start_minute_1 = input.int(0,  title="Start Minute for Session 1 (0-59)", minval=0, maxval=59)
end_hour_1     = input.int(13, title="End Hour for Session 1 (0-23)",    minval=0, maxval=23)
end_minute_1   = input.int(0,  title="End Minute for Session 1 (0-59)",  minval=0, maxval=59)

start_hour_2   = input.int(17, title="Start Hour for Session 2 (0-23)",  minval=0, maxval=23)
start_minute_2 = input.int(0,  title="Start Minute for Session 2 (0-59)", minval=0, maxval=59)
end_hour_2     = input.int(21, title="End Hour for Session 2 (0-23)",    minval=0, maxval=23)
end_minute_2   = input.int(0,  title="End Minute for Session 2 (0-59)",  minval=0, maxval=59)

// --- Maximum Trades per Trading Window ---
max_trades_per_window = input.int(2, "Max Trades per Trading Window", minval=1)

// --- Determine if Current Time is Within Any Trading Window ---
current_hour = hour(time)
current_min  = minute(time)
time_in_minutes = current_hour * 60 + current_min

start_session_1 = start_hour_1 * 60 + start_minute_1
end_session_1   = end_hour_1   * 60 + end_minute_1
start_session_2 = start_hour_2 * 60 + start_minute_2
end_session_2   = end_hour_2   * 60 + end_minute_2

in_session_1 = (time_in_minutes >= start_session_1) and (time_in_minutes < end_session_1)
in_session_2 = (time_in_minutes >= start_session_2) and (time_in_minutes < end_session_2)
in_trading_window = in_session_1 or in_session_2

// --- Plot Background for Trading Windows ---
bgcolor(in_trading_window ? color.new(color.green, 90) : na, title="Trading Window Background")

// --- Variables to Track Trades per Window ---
var int  trade_count_in_window   = 0
var bool prev_in_trading_window = false

// --- Reset Trade Count at Start of New Trading Window ---
if in_trading_window and not prev_in_trading_window
    trade_count_in_window := 0

prev_in_trading_window := in_trading_window

// --- Existing Monthly and Weekly Status Variables ---
var string monthly_status = ""
var string weekly_status  = ""

// Timeframe inputs
monthly_timeframe = "M"
weekly_timeframe  = "W"
daily_timeframe   = "D"
min1_timeframe    = "1"
sec10_timeframe   = "10S"  // 10-second timeframe

// --- Monthly Timeframe Calculation ---
var float monthly_prev_green_open = na
var float monthly_prev_red_open   = na

monthly_close      = request.security(syminfo.tickerid, monthly_timeframe, close)
monthly_open       = request.security(syminfo.tickerid, monthly_timeframe, open)
monthly_prev_close = request.security(syminfo.tickerid, monthly_timeframe, close[1])
monthly_prev_open  = request.security(syminfo.tickerid, monthly_timeframe, open[1])

if (monthly_prev_close > monthly_prev_open)
    monthly_prev_green_open := monthly_prev_open
else if (monthly_prev_close < monthly_prev_open)
    monthly_prev_red_open   := monthly_prev_open

// For bearish, we require the close to be lower than the open and lower than the previous green open.
if (monthly_close < monthly_open and monthly_close < monthly_prev_green_open)
    monthly_status := "Bearish"
else if (monthly_close > monthly_open and monthly_close > monthly_prev_red_open)
    monthly_status := "Bullish"

// --- Weekly Timeframe Calculation ---
var float weekly_prev_green_open = na
var float weekly_prev_red_open   = na

weekly_close      = request.security(syminfo.tickerid, weekly_timeframe, close)
weekly_open       = request.security(syminfo.tickerid, weekly_timeframe, open)
weekly_prev_close = request.security(syminfo.tickerid, weekly_timeframe, close[1])
weekly_prev_open  = request.security(syminfo.tickerid, weekly_timeframe, open[1])

if (weekly_prev_close > weekly_prev_open)
    weekly_prev_green_open := weekly_prev_open
else if (weekly_prev_close < weekly_prev_open)
    weekly_prev_red_open   := weekly_prev_open

// For bearish, require the close to be lower than the open and lower than the previous green open.
if (weekly_close < weekly_open and weekly_close < weekly_prev_green_open)
    weekly_status := "Bearish"
else if (weekly_close > weekly_open and weekly_close > weekly_prev_red_open)
    weekly_status := "Bullish"

// --- Display the status in a box on the chart ---
var table status_table = table.new(position.top_right, 2, 2, border_width=1)
table.cell(status_table, 0, 0, "Monthly", text_color=color.white, bgcolor=color.blue)
table.cell(status_table, 1, 0, "Weekly",  text_color=color.white, bgcolor=color.blue)
table.cell(status_table, 0, 1, monthly_status == "Bearish" ? "Bearish" : (monthly_status == "Bullish" ? "Bullish" : ""), text_color=(monthly_status == "Bearish" ? color.red : color.green))
table.cell(status_table, 1, 1, weekly_status == "Bearish"  ? "Bearish" : (weekly_status == "Bullish"  ? "Bullish" : ""), text_color=(weekly_status == "Bearish" ? color.red : color.green))

// --- EMA Calculations for Current Timeframe ---
ema10   = ta.ema(close, 10)
ema20   = ta.ema(close, 20)
ema50   = ta.ema(close, 50)
ema100  = ta.ema(close, 100)
ema200  = ta.ema(close, 200)

// Plot all EMAs
plot(ema10,   title="EMA 10",  color=color.blue,   linewidth=2)
plot(ema20,   title="EMA 20",  color=color.red,    linewidth=2)
plot(ema50,   title="EMA 50",  color=color.gray,   linewidth=2)
plot(ema100,  title="EMA 100", color=color.purple, linewidth=2)
plot(ema200,  title="EMA 200", color=color.orange, linewidth=2)

// --- Real-Time Daily Data and EMAs ---
realTimeEMA10 = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 10), lookahead=barmerge.lookahead_on)
realTimeEMA20 = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 20), lookahead=barmerge.lookahead_on)
daily_open_now = request.security(syminfo.tickerid, daily_timeframe, open, lookahead=barmerge.lookahead_on)

// For bearish, we now want the daily open to be above the real-time EMA10 and below the real-time EMA20.
dailyOpenCondition = (daily_open_now > realTimeEMA10) and (daily_open_now < realTimeEMA20)

// --- Daily Confirmation Logic ---
daily_close      = request.security(syminfo.tickerid, daily_timeframe, close)
daily_high       = request.security(syminfo.tickerid, daily_timeframe, high)
daily_low        = request.security(syminfo.tickerid, daily_timeframe, low)
daily_prev_close = request.security(syminfo.tickerid, daily_timeframe, close[1])
daily_prev_open  = request.security(syminfo.tickerid, daily_timeframe, open[1])

ema10_daily  = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 10))
ema20_daily  = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 20))
ema50_daily  = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 50))
ema100_daily = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 100))
ema200_daily = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 200))

// For bearish daily EMA alignment, require: ema10 < ema20 < ema200
emas_aligned_daily_bearish = (ema10_daily < ema20_daily) and (ema20_daily < ema200_daily)

// "Strict" bearish daily bar
bool current_bearish = (daily_close < daily_open_now) 
                       and (daily_close < ema10_daily) 
                       and (daily_open_now < ema20_daily)

// Basic "previous" checks inverted: previously bullish becomes previous_bullish
bool previous_bullish      = (daily_prev_close > daily_prev_open)
bool previous_condition_met = previous_bullish and (daily_prev_open > daily_close)

// Persistent flags and reference for cascading logic
var bool dailyConfirmed          = false
var bool prev_day_bearish_status = false
var float lastDEA1RedOpen = na  // new reference for bearish confirmation

short_signal = false

if timeframe.isdaily and barstate.isconfirmed
    
    // Overall requirement for monthly + weekly + daily alignment:
    bool fullBearCondition = (monthly_status == "Bearish") 
                             and (weekly_status == "Bearish") 
                             and emas_aligned_daily_bearish
    
    // 1) Primary "Red" trigger: strictly bearish daily bar
    bool redTrigger = current_bearish and (not previous_bullish or previous_condition_met) and fullBearCondition
    
    // 2) "Green" trigger (fallback): bar is green but closes below last red reference
    bool greenTrigger = (daily_close > daily_open_now)
                        and not na(lastDEA1RedOpen)
                        and (daily_close < lastDEA1RedOpen)
                        and fullBearCondition
    
    // 3) Alternate red trigger: if strict criteria fail but the bearish bar still qualifies
    bool altRedTrigger = (daily_close < daily_open_now)
                         and not redTrigger
                         and not na(lastDEA1RedOpen)
                         and (daily_close < lastDEA1RedOpen)
                         and fullBearCondition
    
    if redTrigger
        dailyConfirmed := true
        label.new(bar_index, daily_low, "DEA1", color=color.red, textcolor=color.white, style=label.style_label_down)
        lastDEA1RedOpen := daily_open_now
        short_signal := true
    
    else if greenTrigger
        dailyConfirmed := true
        label.new(bar_index, daily_low, "DEA1", color=color.red, textcolor=color.white, style=label.style_label_down)
        // do not update lastDEA1RedOpen
        short_signal := true
    
    else if altRedTrigger
        dailyConfirmed := true
        label.new(bar_index, daily_low, "DEA1", color=color.red, textcolor=color.white, style=label.style_label_down)
        lastDEA1RedOpen := daily_open_now
        short_signal := true
    
    else
        dailyConfirmed := false
    
    prev_day_bearish_status := fullBearCondition
    
else
    dailyConfirmed          := dailyConfirmed[1]
    prev_day_bearish_status := prev_day_bearish_status[1]

// --- Pass Variables to Lower Timeframes ---
dailyConfirmed_1min  = request.security(syminfo.tickerid, daily_timeframe, dailyConfirmed ? 1 : 0,  lookahead=barmerge.lookahead_off) == 1
dailyConfirmed_10sec = dailyConfirmed_1min

prev_day_bearish_status_1min  = request.security(syminfo.tickerid, daily_timeframe, prev_day_bearish_status ? 1 : 0,  lookahead=barmerge.lookahead_off) == 1
prev_day_bearish_status_10sec = prev_day_bearish_status_1min

emas_aligned_daily_10_20_200_1min  = request.security(syminfo.tickerid, daily_timeframe, emas_aligned_daily_bearish ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
emas_aligned_daily_10_20_200_10sec = emas_aligned_daily_10_20_200_1min

// --- Price Cross Above Daily EMA10 on 1-Minute ---
// For bearish, we look for a cross above EMA10 as a potential reversal signal.
ema10_daily_1min = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 10), lookahead=barmerge.lookahead_on)
price_crossed_above_ema10_daily_1min = ta.crossover(close, ema10_daily_1min)

var bool crossed_above_daily_ema10_today_1min = false
newDay_1min = ta.change(time("D")) != 0
if newDay_1min
    crossed_above_daily_ema10_today_1min := false
if price_crossed_above_ema10_daily_1min
    crossed_above_daily_ema10_today_1min := true

// --- Price Cross Above Daily EMA10 on 10-Second ---
ema10_daily_10sec = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 10), lookahead=barmerge.lookahead_on)
price_crossed_above_ema10_daily_10sec = ta.crossover(close, ema10_daily_10sec)

var bool crossed_above_daily_ema10_today_10sec = false
newDay_10sec = ta.change(time("D")) != 0
if newDay_10sec
    crossed_above_daily_ema10_today_10sec := false
if price_crossed_above_ema10_daily_10sec
    crossed_above_daily_ema10_today_10sec := true

// --- 1minRE Logic (Bearish) ---
var label debug_label_1minRE = na

ema10_1min  = ta.ema(close, 10)
ema20_1min  = ta.ema(close, 20)
ema50_1min  = ta.ema(close, 50)
ema100_1min = ta.ema(close, 100)
ema200_1min = ta.ema(close, 200)

// For bearish: invert EMA alignment (EMA10 < EMA20, etc.)
emas_aligned_1min_bearish = (ema10_1min < ema20_1min) and (ema20_1min < ema50_1min) and (ema20_1min < ema100_1min) and (ema20_1min < ema200_1min)

priceBelowEMA10_1min   = close < ema10_1min
isBearishCandle_1min   = close < open
// For bearish, we check if price has crossed below EMA10
priceCrossedEMA10_1min = ta.crossunder(close, ema10_1min)
resetCondition_1min    = close > ema20_1min

var bool waitForNextBearishCandle_1min  = false
var bool waitingForPriceBelowEMA10_1min = false
bearishSignal_1min = false

if timeframe.isintraday 
 and timeframe.multiplier == 1
 and emas_aligned_1min_bearish
 and crossed_above_daily_ema10_today_1min
 and prev_day_bearish_status_1min
 and emas_aligned_daily_10_20_200_1min
 and in_trading_window
    if resetCondition_1min
        bearishSignal_1min := false
        waitForNextBearishCandle_1min  := false
        waitingForPriceBelowEMA10_1min := true
    else
        if waitingForPriceBelowEMA10_1min
            if priceBelowEMA10_1min
                waitingForPriceBelowEMA10_1min := false
            else
                bearishSignal_1min := false
                waitForNextBearishCandle_1min := false
        else
            if priceBelowEMA10_1min
                if priceCrossedEMA10_1min
                    if isBearishCandle_1min and barstate.isconfirmed
                        bearishSignal_1min := true
                        waitForNextBearishCandle_1min := false
                    else
                        waitForNextBearishCandle_1min := true
                else
                    if waitForNextBearishCandle_1min
                        if isBearishCandle_1min and priceBelowEMA10_1min and barstate.isconfirmed
                            bearishSignal_1min := true
                            waitForNextBearishCandle_1min := false
                        else
                            waitForNextBearishCandle_1min := false
            else
                waitForNextBearishCandle_1min := false

    prev_open_below_ema20_1min  = open[1] < ema20_1min[1]
    prev_close_below_ema20_1min = close[1] < ema20_1min[1]
    if bearishSignal_1min and prev_open_below_ema20_1min and prev_close_below_ema20_1min
        label.new(bar_index, low - (high - low) * 0.5, "Short", color=color.green, textcolor=color.white, style=label.style_label_down)
        short_signal := true

// --- 10secRE Logic (Bearish) ---
var label debug_label_10secRE = na

ema10_10sec  = ta.ema(close, 10)
ema20_10sec  = ta.ema(close, 20)
ema50_10sec  = ta.ema(close, 50)
ema100_10sec = ta.ema(close, 100)
ema200_10sec = ta.ema(close, 200)

emas_aligned_10sec_bearish = (ema10_10sec < ema20_10sec) 
                             and (ema20_10sec < ema50_10sec)
                             and (ema20_10sec < ema100_10sec)
                             and (ema20_10sec < ema200_10sec)

priceBelowEMA10_10sec   = close < ema10_10sec
isBearishCandle_10sec   = close < open
priceCrossedEMA10_10sec = ta.crossunder(close, ema10_10sec)
resetCondition_10sec    = close > ema20_10sec

var bool waitForNextBearishCandle_10sec  = false
var bool waitingForPriceBelowEMA10_10sec = false
bearishSignal_10sec = false

if timeframe.isintraday 
 and timeframe.multiplier == 10 
 and emas_aligned_10sec_bearish
 and crossed_above_daily_ema10_today_10sec
 and prev_day_bearish_status_10sec
 and emas_aligned_daily_10_20_200_10sec
 and in_trading_window
    if resetCondition_10sec
        bearishSignal_10sec := false
        waitForNextBearishCandle_10sec  := false
        waitingForPriceBelowEMA10_10sec := true
    else
        if waitingForPriceBelowEMA10_10sec
            if priceBelowEMA10_10sec
                waitingForPriceBelowEMA10_10sec := false
            else
                bearishSignal_10sec := false
                waitForNextBearishCandle_10sec := false
        else
            if priceBelowEMA10_10sec
                if priceCrossedEMA10_10sec
                    if isBearishCandle_10sec and barstate.isconfirmed
                        bearishSignal_10sec := true
                        waitForNextBearishCandle_10sec := false
                    else
                        waitForNextBearishCandle_10sec := true
                else
                    if waitForNextBearishCandle_10sec
                        if isBearishCandle_10sec and priceBelowEMA10_10sec and barstate.isconfirmed
                            bearishSignal_10sec := true
                            waitForNextBearishCandle_10sec := false
                        else
                            waitForNextBearishCandle_10sec := false
            else
                waitForNextBearishCandle_10sec := false

    if bearishSignal_10sec
        label.new(bar_index, low - (high - low) * 0.5, "Short", color=color.green, textcolor=color.white, style=label.style_label_down)
        short_signal := true

// --- Updated EA Logic for 1-Minute (Bearish) ---
if timeframe.isintraday 
 and timeframe.multiplier == 1 
 and (dailyConfirmed_1min or dailyOpenCondition)  // Incorporate dailyOpenCondition
 and in_trading_window
 and close < ema20_daily  // Never take trade under daily 20 EMA for short
    // Reuse same EMAs at 1min:
    ema10_1min_EA  = ema10_1min
    ema20_1min_EA  = ema20_1min
    ema50_1min_EA  = ema50_1min
    ema100_1min_EA = ema100_1min
    ema200_1min_EA = ema200_1min

    // Bearish EMA alignment for EA:
    emas_aligned_1min_EA = (ema10_1min_EA < ema20_1min_EA) 
                           and (ema20_1min_EA < ema50_1min_EA)
                           and (ema20_1min_EA < ema100_1min_EA)
                           and (ema20_1min_EA < ema200_1min_EA)
    
    priceBelowEMA10_1min_EA   = close < ema10_1min_EA
    isBearishCandle_1min_EA   = close < open
    priceCrossedEMA10_1min_EA = ta.crossunder(close, ema10_1min_EA)
    
    prev_open_below_ema20_1min_EA  = open[1] < ema20_1min[1]
    prev_close_below_ema20_1min_EA = close[1] < ema20_1min[1]
    
    if emas_aligned_1min_EA
       and priceBelowEMA10_1min_EA
       and priceCrossedEMA10_1min_EA
       and isBearishCandle_1min_EA
       and prev_open_below_ema20_1min_EA
       and prev_close_below_ema20_1min_EA
       and barstate.isconfirmed
        label.new(bar_index, low - (high - low) * 0.5, "Short", color=color.green, textcolor=color.white, style=label.style_label_down)
        short_signal := true

// --- Updated EA Logic for 10-Second (Bearish) ---
if timeframe.isintraday 
 and timeframe.multiplier == 10 
 and (dailyConfirmed_10sec or dailyOpenCondition)  // Incorporate dailyOpenCondition
 and in_trading_window
 and close < ema20_daily  // Never take trade under daily 20 EMA for short
    // Reuse same EMAs at 10sec:
    ema10_10sec_EA  = ema10_10sec
    ema20_10sec_EA  = ema20_10sec
    ema50_10sec_EA  = ema50_10sec
    ema100_10sec_EA = ema100_10sec
    ema200_10sec_EA = ema200_10sec
    
    // Bearish EMA alignment for EA:
    emas_aligned_10sec_EA = (ema10_10sec_EA < ema20_10sec_EA) 
                           and (ema20_10sec_EA < ema50_10sec_EA)
                           and (ema20_10sec_EA < ema100_10sec_EA)
                           and (ema20_10sec_EA < ema200_10sec_EA)
    
    priceBelowEMA10_10sec_EA   = close < ema10_10sec_EA
    isBearishCandle_10sec_EA   = close < open
    priceCrossedEMA10_10sec_EA = ta.crossunder(close, ema10_10sec_EA)
    
    if emas_aligned_10sec_EA
       and priceBelowEMA10_10sec_EA
       and priceCrossedEMA10_10sec_EA
       and isBearishCandle_10sec_EA
       and barstate.isconfirmed
        label.new(bar_index, low - (high - low) * 0.5, "Short", color=color.green, textcolor=color.white, style=label.style_label_down)
        short_signal := true

// --- Debugging Label Logic for crossing above daily EMA10 on 1-Minute Timeframe ---
if timeframe.isintraday and timeframe.multiplier == 1
    if price_crossed_above_ema10_daily_1min
        label.new(bar_index, high, "Crossed Above", color=color.red, textcolor=color.white, style=label.style_label_up)

// --- Price Action Management Tool Integration ---
selectedTimeframe_PA = input.timeframe("15", title="Select Timeframe for Price Action", options=["1", "15", "10" , "60", "240", "D"], tooltip="Choose the timeframe for price action calculations (1m, 15m, 1H, 4H, Daily)")
price_action_adjustment_percent = input.float(0.0, "Price Action Line Adjustment (%)", minval=-100, maxval=100, step=0.1, tooltip="Adjust the Price Action Line up or down by a percentage. Positive values move it up, negative values move it down.")

isRed_PA(candleClose, candleOpen) =>
    candleClose < candleOpen

priceActionLine_HTF() =>
    var float base_priceActionLine = na
    if barstate.isconfirmed
        if isRed_PA(close, open)
            if close < low[1]
                base_priceActionLine := high
            else if (close < open[1]) and (close[1] > open[1])
                base_priceActionLine := high
            else
                base_priceActionLine := na
        else
            base_priceActionLine := na
    base_priceActionLine

priceActionLine_base = request.security(syminfo.tickerid, selectedTimeframe_PA, priceActionLine_HTF(), lookahead=barmerge.lookahead_off)
// For short trades, a positive adjustment moves the line higher.
priceActionLine = not na(priceActionLine_base) ? priceActionLine_base * (1 + price_action_adjustment_percent / 100) : na
plot(priceActionLine, color=color.red, title="Price Action Line", linewidth=2, style=plot.style_line)

// --- Strategy Execution and Risk Management ---
var float fixed_stop_loss_level = na
var float trailing_stop         = na
var float stop_level            = na
var bool  trailing_active       = false

if (short_signal and strategy.position_size >= 0 and in_trading_window and trade_count_in_window < max_trades_per_window)
    // For a short, the fixed stop loss is set above EMA200.
    fixed_stop_loss_level := ema200 * (1 + initial_stop_loss_percent / 100)
    trailing_stop         := fixed_stop_loss_level
    trailing_active       := false

    distanceToStopLoss    = math.abs(fixed_stop_loss_level - close)
    distanceToStopLoss    := distanceToStopLoss > 0 ? distanceToStopLoss : 0.0001
    // Use fixed 100k base for risk calculation
    riskAmount            = 100000 * (riskPercentage / 100)
    positionSize          = riskAmount / distanceToStopLoss

    // Calculate volume based on contract size
    volume = positionSize / contractSize

    pipDistance           = distanceToStopLoss / pipSize
    entryAlertMessage     = "7766821208277,sell," + tickerSymbol + ",risk=" + str.tostring(volume)

    strategy.entry("Short", strategy.short, qty=positionSize, alert_message=entryAlertMessage)
    alert(entryAlertMessage, alert.freq_once_per_bar_close)
    trade_count_in_window += 1

if (strategy.position_size < 0)
    // For a short, profit is made as price falls.
    if (not trailing_active and not na(priceActionLine) and priceActionLine < strategy.position_avg_price)
        trailing_active := true
        trailing_stop   := priceActionLine
    if (trailing_active and not na(priceActionLine))
        trailing_stop   := math.min(trailing_stop, priceActionLine)
    stop_level := trailing_stop
    strategy.exit("Stop Loss", "Short", stop=stop_level, alert_message="7766821208277,closeshort," + tickerSymbol)

plot(strategy.position_size < 0 ? stop_level : na, title="Stop Loss", color=color.yellow, linewidth=2)

var bool wasInPosition = false
stop_triggered = wasInPosition and (strategy.position_size == 0) and (close >= stop_level)
if stop_triggered
    alert("Stop loss triggered for " + tickerSymbol, alert.freq_once_per_bar_close)

wasInPosition := strategy.position_size < 0

// --- End of Strategy ---
