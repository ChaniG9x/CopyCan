//@version=5
strategy("Full Early-Adopter Strategy with Cascading Logic, Extra EMAs, and Fallback Green Trigger", overlay=true, pyramiding=0)

// --- Ticker Symbol Input ---
tickerSymbol = input.string("EURNZD", title="Ticker Symbol", tooltip="Enter the ticker symbol for alerts (e.g., EURNZD, EURUSD, GBPUSD, SPX, XAUUSD)")

// --- Pip Size Input ---
pipSize = input.float(0.0001, title="Pip Size", tooltip="Define the pip size based on the asset type (e.g., 0.0001 for Forex, 1 for Indices, 0.01 for Commodities)")

// --- Position Sizing for Percentage Risk ---
riskPercentage = input.float(1.0, "Risk Percentage per Trade", minval=0.1, maxval=100, step=0.1)

// --- Contract Size Input ---
contractSize = input.float(1.0, title="Contract Size", tooltip="Enter the contract size as defined in your strategy input tabs")

// --- Initial Stop Loss Percentage Below EMA200 ---
initial_stop_loss_percent = input.float(0.03, "Initial Stop Loss Percentage Below EMA200 (%)", minval=0.0, step=0.01, tooltip="Set the initial stop loss percentage below the EMA200. Default is 0.03%.")

// --- Configurable Trading Windows (Hours + Minutes) ---
start_hour_1   = input.int(7,  title="Start Hour for Session 1 (0-23)",  minval=0, maxval=23)
start_minute_1 = input.int(0,  title="Start Minute for Session 1 (0-59)", minval=0, maxval=59)
end_hour_1     = input.int(13, title="End Hour for Session 1 (0-23)",    minval=0, maxval=23)
end_minute_1   = input.int(0,  title="End Minute for Session 1 (0-59)",  minval=0, maxval=59)

start_hour_2   = input.int(17, title="Start Hour for Session 2 (0-23)",  minval=0, maxval=23)
start_minute_2 = input.int(0,  title="Start Minute for Session 2 (0-59)", minval=0, maxval=59)
end_hour_2     = input.int(21, title="End Hour for Session 2 (0-23)",    minval=0, maxval=23)
end_minute_2   = input.int(0,  title="End Minute for Session 2 (0-59)",  minval=0, maxval=59)

// --- Maximum Trades per Trading Window ---
max_trades_per_window = input.int(2, "Max Trades per Trading Window", minval=1)

// --- Determine if Current Time is Within Any Trading Window ---
current_hour = hour(time)
current_min  = minute(time)
time_in_minutes = current_hour * 60 + current_min

start_session_1 = start_hour_1 * 60 + start_minute_1
end_session_1   = end_hour_1   * 60 + end_minute_1
start_session_2 = start_hour_2 * 60 + start_minute_2
end_session_2   = end_hour_2   * 60 + end_minute_2

in_session_1 = (time_in_minutes >= start_session_1) and (time_in_minutes < end_session_1)
in_session_2 = (time_in_minutes >= start_session_2) and (time_in_minutes < end_session_2)
in_trading_window = in_session_1 or in_session_2

// --- Plot Background for Trading Windows ---
bgcolor(in_trading_window ? color.new(color.green, 90) : na, title="Trading Window Background")

// --- Variables to Track Trades per Window ---
var int  trade_count_in_window   = 0
var bool prev_in_trading_window = false

// --- Reset Trade Count at Start of New Trading Window ---
if in_trading_window and not prev_in_trading_window
    trade_count_in_window := 0

prev_in_trading_window := in_trading_window

// --- Existing Monthly and Weekly Status Variables ---
// (These are computed using request.security so they update on every bar.)
var string monthly_status = ""
var string weekly_status  = ""

// Timeframe inputs
monthly_timeframe = "M"
weekly_timeframe  = "W"
daily_timeframe   = "D"
min1_timeframe    = "1"
sec10_timeframe   = "10S"  // 10-second timeframe

// --- Monthly Timeframe Calculation ---
var float monthly_prev_green_open = na
var float monthly_prev_red_open   = na

monthly_close      = request.security(syminfo.tickerid, monthly_timeframe, close)
monthly_open       = request.security(syminfo.tickerid, monthly_timeframe, open)
monthly_prev_close = request.security(syminfo.tickerid, monthly_timeframe, close[1])
monthly_prev_open  = request.security(syminfo.tickerid, monthly_timeframe, open[1])

if (monthly_prev_close > monthly_prev_open)
    monthly_prev_green_open := monthly_prev_open
else if (monthly_prev_close < monthly_prev_open)
    monthly_prev_red_open   := monthly_prev_open

if (monthly_close > monthly_open and monthly_close > monthly_prev_red_open)
    monthly_status := "Bullish"
else if (monthly_close < monthly_open and monthly_close < monthly_prev_green_open)
    monthly_status := "Bearish"

// --- Weekly Timeframe Calculation ---
var float weekly_prev_green_open = na
var float weekly_prev_red_open   = na

weekly_close      = request.security(syminfo.tickerid, weekly_timeframe, close)
weekly_open       = request.security(syminfo.tickerid, weekly_timeframe, open)
weekly_prev_close = request.security(syminfo.tickerid, weekly_timeframe, close[1])
weekly_prev_open  = request.security(syminfo.tickerid, weekly_timeframe, open[1])

if (weekly_prev_close > weekly_prev_open)
    weekly_prev_green_open := weekly_prev_open
else if (weekly_prev_close < weekly_prev_open)
    weekly_prev_red_open   := weekly_prev_open

if (weekly_close > weekly_open and weekly_close > weekly_prev_red_open)
    weekly_status := "Bullish"
else if (weekly_close < weekly_open and weekly_close < weekly_prev_green_open)
    weekly_status := "Bearish"

// --- Display the status in a box on the chart ---
var table status_table = table.new(position.top_right, 2, 2, border_width=1)
table.cell(status_table, 0, 0, "Monthly", text_color=color.white, bgcolor=color.blue)
table.cell(status_table, 1, 0, "Weekly",  text_color=color.white, bgcolor=color.blue)
table.cell(status_table, 0, 1, monthly_status == "Bullish" ? "Bullish" : (monthly_status == "Bearish" ? "Bearish" : ""), text_color=(monthly_status == "Bullish" ? color.green : color.red))
table.cell(status_table, 1, 1, weekly_status == "Bullish"  ? "Bullish" : (weekly_status == "Bearish"  ? "Bearish" : ""), text_color=(weekly_status == "Bullish" ? color.green : color.red))

// --- EMA Calculations for Current Timeframe ---
ema10   = ta.ema(close, 10)
ema20   = ta.ema(close, 20)
ema50   = ta.ema(close, 50)
ema100  = ta.ema(close, 100)
ema200  = ta.ema(close, 200)

// Plot all EMAs
plot(ema10,   title="EMA 10",  color=color.blue,   linewidth=2)
plot(ema20,   title="EMA 20",  color=color.red,    linewidth=2)
plot(ema50,   title="EMA 50",  color=color.gray,   linewidth=2)
plot(ema100,  title="EMA 100", color=color.purple, linewidth=2)
plot(ema200,  title="EMA 200", color=color.orange, linewidth=2)

// --- Real-Time Daily Data and EMAs ---
realTimeEMA10 = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 10), lookahead=barmerge.lookahead_on)
realTimeEMA20 = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 20), lookahead=barmerge.lookahead_on)
daily_open_now = request.security(syminfo.tickerid, daily_timeframe, open, lookahead=barmerge.lookahead_on)

// New condition: Check if current day's open is below realTimeEMA10 and above realTimeEMA20
dailyOpenCondition = (daily_open_now < realTimeEMA10) and (daily_open_now > realTimeEMA20)

// *** NEW: Compute daily 20 EMA for lower timeframe label filtering ***
dailyEMA20_lower = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 20), lookahead=barmerge.lookahead_off)
priceAboveDaily20 = close > dailyEMA20_lower

// --- Daily Confirmation Logic ---
daily_close      = request.security(syminfo.tickerid, daily_timeframe, close)
daily_high       = request.security(syminfo.tickerid, daily_timeframe, high)
daily_low        = request.security(syminfo.tickerid, daily_timeframe, low)
daily_prev_close = request.security(syminfo.tickerid, daily_timeframe, close[1])
daily_prev_open  = request.security(syminfo.tickerid, daily_timeframe, open[1])

ema10_daily  = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 10))
ema20_daily  = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 20))
ema50_daily  = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 50))
ema100_daily = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 100))
ema200_daily = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 200))

// For daily 10 > 20 > 200 (original core condition)
emas_aligned_daily = (ema10_daily > ema20_daily) and (ema20_daily > ema200_daily)

// "Strict" bullish daily bar
bool current_bullish = (daily_close > daily_open_now) and (daily_close > ema10_daily) and (daily_open_now > ema20_daily)

// Basic "previous" checks
bool previous_bearish      = (daily_prev_close < daily_prev_open)
bool previous_condition_met = previous_bearish and (daily_prev_open < daily_close)

// Persistent flags
var bool dailyConfirmed          = false
var bool prev_day_bullish_status = false

// Tracks the open price of the LAST green DEA1 bar
var float lastDEA1GreenOpen = na

long_signal = false

if timeframe.isdaily and barstate.isconfirmed
    // Overall requirement for monthly + weekly + daily alignment:
    bool fullBullCondition = (monthly_status == "Bullish") and (weekly_status == "Bullish") and emas_aligned_daily

    // 1) Original "Green" trigger: strictly bullish daily bar
    bool greenTrigger = current_bullish and (not previous_bearish or previous_condition_met) and fullBullCondition

    // 2) "Red" trigger: bar is red but closes above last green DEA1 open
    bool redTrigger = (daily_close < daily_open_now) and not na(lastDEA1GreenOpen) and (daily_close > lastDEA1GreenOpen) and fullBullCondition

    // 3) Alternate green fallback: even if it fails the strict logic,
    //    if the bar is green and stays above lastDEA1GreenOpen, it still qualifies.
    bool altGreenTrigger = (daily_close > daily_open_now) and not greenTrigger and not na(lastDEA1GreenOpen) and (daily_close > lastDEA1GreenOpen) and fullBullCondition

    if greenTrigger
        dailyConfirmed := true
        label.new(bar_index, daily_high, "DEA1", color=color.blue, textcolor=color.white, style=label.style_label_up)
        lastDEA1GreenOpen := daily_open_now
        long_signal := true
    else if redTrigger
        dailyConfirmed := true
        label.new(bar_index, daily_high, "DEA1", color=color.blue, textcolor=color.white, style=label.style_label_up)
        long_signal := true
    else if altGreenTrigger
        dailyConfirmed := true
        label.new(bar_index, daily_high, "DEA1", color=color.blue, textcolor=color.white, style=label.style_label_up)
        lastDEA1GreenOpen := daily_open_now
        long_signal := true
    else
        dailyConfirmed := false

    // Keep track of bullish status for the day if needed
    prev_day_bullish_status := fullBullCondition
else
    // On non-daily bars, carry forward dailyConfirmed from the previous bar
    dailyConfirmed          := dailyConfirmed[1]
    prev_day_bullish_status := prev_day_bullish_status[1]

// --- Pass Variables to Lower Timeframes ---
dailyConfirmed_1min  = request.security(syminfo.tickerid, daily_timeframe, dailyConfirmed ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
dailyConfirmed_10sec = dailyConfirmed_1min

prev_day_bullish_status_1min  = request.security(syminfo.tickerid, daily_timeframe, prev_day_bullish_status ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
prev_day_bullish_status_10sec = prev_day_bullish_status_1min

emas_aligned_daily_10_20_200_1min  = request.security(syminfo.tickerid, daily_timeframe, emas_aligned_daily ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
emas_aligned_daily_10_20_200_10sec = emas_aligned_daily_10_20_200_1min

// --- Define a function to calculate fullBullCondition on a daily basis ---
fullBullCondition() =>
    // Request the monthly and weekly statuses on their respective timeframes
    mStat = request.security(syminfo.tickerid, monthly_timeframe, monthly_status, lookahead=barmerge.lookahead_off)
    wStat = request.security(syminfo.tickerid, weekly_timeframe, weekly_status, lookahead=barmerge.lookahead_off)
    // Also get the daily EMA alignment (as 1 if true, 0 otherwise)
    dAligned = request.security(syminfo.tickerid, daily_timeframe, (ema10_daily > ema20_daily) and (ema20_daily > ema200_daily) ? 1 : 0, lookahead=barmerge.lookahead_off) == 1
    mStat == "Bullish" and wStat == "Bullish" and dAligned

// --- Price Cross Below Daily EMA10/EMA20 on 1-Minute ---
// Request daily EMA10 and EMA20 on 1-minute timeframe:
ema10_daily_1min = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 10), lookahead=barmerge.lookahead_on)
ema20_daily_1min = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 20), lookahead=barmerge.lookahead_on)

price_crossed_below_ema10_daily_1min = ta.crossunder(close, ema10_daily_1min)
price_crossed_below_ema20_daily_1min = ta.crossunder(close, ema20_daily_1min)

var bool crossed_below_daily_ema10_today_1min = false
newDay_1min = ta.change(time("D")) != 0
if newDay_1min
    crossed_below_daily_ema10_today_1min := false
// Modified: Set flag true if price crosses below EMA10 OR EMA20 and fullBullCondition() is true
if (price_crossed_below_ema10_daily_1min or price_crossed_below_ema20_daily_1min) and fullBullCondition()
    crossed_below_daily_ema10_today_1min := true

// --- Price Cross Below Daily EMA10 on 10-Second ---
ema10_daily_10sec = request.security(syminfo.tickerid, daily_timeframe, ta.ema(close, 10), lookahead=barmerge.lookahead_on)
price_crossed_below_ema10_daily_10sec = ta.crossunder(close, ema10_daily_10sec)

var bool crossed_below_daily_ema10_today_10sec = false
newDay_10sec = ta.change(time("D")) != 0
if newDay_10sec
    crossed_below_daily_ema10_today_10sec := false
if price_crossed_below_ema10_daily_10sec
    crossed_below_daily_ema10_today_10sec := true

// --- Price Action Management Tool Integration ---
// (Moved here so that the priceActionLine variable is available for BG-label logic)
selectedTimeframe_PA = input.timeframe("15", title="Select Timeframe for Price Action", options=["1", "15", "10", "60", "240", "D"], tooltip="Choose the timeframe for price action calculations (1m, 15m, 1H, 4H, Daily)")
price_action_adjustment_percent = input.float(0.0, "Price Action Line Adjustment (%)", minval=-100, maxval=100, step=0.1, tooltip="Adjust the Price Action Line up or down by a percentage. Positive values move it up, negative values move it down.")

isGreen_PA(candleClose, candleOpen) =>
    candleClose > candleOpen

priceActionLine_HTF() =>
    var float base_priceActionLine = na
    if barstate.isconfirmed
        if isGreen_PA(close, open)
            if close > high[1]
                base_priceActionLine := low
            else if (close > open[1]) and (close[1] < open[1])
                base_priceActionLine := low
            else
                base_priceActionLine := na
        else
            base_priceActionLine := na
    base_priceActionLine

priceActionLine_base = request.security(syminfo.tickerid, selectedTimeframe_PA, priceActionLine_HTF(), lookahead=barmerge.lookahead_off)
priceActionLine = not na(priceActionLine_base) ? priceActionLine_base * (1 + price_action_adjustment_percent / 100) : na
plot(priceActionLine, color=color.green, title="Price Action Line", linewidth=2, style=plot.style_line)

// --- 1minRE Logic ---
var label debug_label_1minRE = na

ema10_1min  = ta.ema(close, 10)
ema20_1min  = ta.ema(close, 20)
ema50_1min  = ta.ema(close, 50)
ema100_1min = ta.ema(close, 100)
ema200_1min = ta.ema(close, 200)

// (EMA10 > EMA20) and (EMA20 > EMA50, EMA100, EMA200)
emas_aligned_1min = (ema10_1min > ema20_1min) and (ema20_1min > ema50_1min) and (ema20_1min > ema100_1min) and (ema20_1min > ema200_1min)

priceAboveEMA10_1min   = close > ema10_1min
isBullishCandle_1min   = close > open
priceCrossedEMA10_1min = (low <= ema10_1min) and (high >= ema10_1min)
resetCondition_1min    = close < ema20_1min

var bool waitForNextBullishCandle_1min  = false
var bool waitingForPriceAboveEMA10_1min = false
bearishSignal_1min = false

if timeframe.isintraday and timeframe.multiplier == 1 and emas_aligned_1min and crossed_below_daily_ema10_today_1min and prev_day_bullish_status_1min and emas_aligned_daily_10_20_200_1min and in_trading_window
    if resetCondition_1min
        bearishSignal_1min := false
        waitForNextBullishCandle_1min := false
        waitingForPriceAboveEMA10_1min := true
    else
        if waitingForPriceAboveEMA10_1min
            if priceAboveEMA10_1min
                waitingForPriceAboveEMA10_1min := false
            else
                bearishSignal_1min := false
                waitForNextBullishCandle_1min := false
        else
            if priceAboveEMA10_1min
                if priceCrossedEMA10_1min
                    if isBullishCandle_1min and barstate.isconfirmed
                        bearishSignal_1min := true
                        waitForNextBullishCandle_1min := false
                    else
                        waitForNextBullishCandle_1min := true
                else
                    if waitForNextBullishCandle_1min
                        if isBullishCandle_1min and priceAboveEMA10_1min and barstate.isconfirmed
                            bearishSignal_1min := true
                            waitForNextBullishCandle_1min := false
                        else
                            waitForNextBullishCandle_1min := false
            else
                waitForNextBullishCandle_1min := false

    prev_open_above_ema20_1min  = open[1] > ema20_1min[1]
    prev_close_above_ema20_1min = close[1] > ema20_1min[1]
    if bearishSignal_1min and prev_open_above_ema20_1min and prev_close_above_ema20_1min and priceAboveDaily20
        label.new(bar_index, high + (high - low) * 0.5, "Long", color=color.red, textcolor=color.white, style=label.style_label_down)
        long_signal := true

// --- 10secRE Logic ---
var label debug_label_10secRE = na

ema10_10sec  = ta.ema(close, 10)
ema20_10sec  = ta.ema(close, 20)
ema50_10sec  = ta.ema(close, 50)
ema100_10sec = ta.ema(close, 100)
ema200_10sec = ta.ema(close, 200)

// (EMA10 > EMA20) and (EMA20 > EMA50, EMA100, EMA200)
emas_aligned_10sec = (ema10_10sec > ema20_10sec) and (ema20_10sec > ema50_10sec) and (ema20_10sec > ema100_10sec) and (ema20_10sec > ema200_10sec)

priceAboveEMA10_10sec   = close > ema10_10sec
isBullishCandle_10sec   = close > open
priceCrossedEMA10_10sec = (low <= ema10_10sec) and (high >= ema10_10sec)
resetCondition_10sec    = close < ema20_10sec

var bool waitForNextBullishCandle_10sec  = false
var bool waitingForPriceAboveEMA10_10sec = false
bearishSignal_10sec = false

if timeframe.isintraday and timeframe.multiplier == 10 and emas_aligned_10sec and crossed_below_daily_ema10_today_10sec and prev_day_bullish_status_10sec and emas_aligned_daily_10_20_200_10sec and in_trading_window
    if resetCondition_10sec
        bearishSignal_10sec := false
        waitForNextBullishCandle_10sec := false
        waitingForPriceAboveEMA10_10sec := true
    else
        if waitingForPriceAboveEMA10_10sec
            if priceAboveEMA10_10sec
                waitingForPriceAboveEMA10_10sec := false
            else
                bearishSignal_10sec := false
                waitForNextBullishCandle_10sec := false
        else
            if priceAboveEMA10_10sec
                if priceCrossedEMA10_10sec
                    if isBullishCandle_10sec and barstate.isconfirmed
                        bearishSignal_10sec := true
                        waitForNextBullishCandle_10sec := false
                    else
                        waitForNextBullishCandle_10sec := true
                else
                    if waitForNextBullishCandle_10sec
                        if isBullishCandle_10sec and priceAboveEMA10_10sec and barstate.isconfirmed
                            bearishSignal_10sec := true
                            waitForNextBullishCandle_10sec := false
                        else
                            waitForNextBullishCandle_10sec := false
            else
                waitForNextBullishCandle_10sec := false

    if bearishSignal_10sec and priceAboveDaily20
        label.new(bar_index, high + (high - low) * 0.5, "Long", color=color.red, textcolor=color.white, style=label.style_label_down)
        long_signal := true

// --- Updated EA Logic for 1-Minute ---
if timeframe.isintraday and timeframe.multiplier == 1 and (dailyConfirmed_1min or dailyOpenCondition) and in_trading_window and close > ema20_daily and priceAboveDaily20
    // Reuse same EMAs at 1min:
    ema10_1min_EA  = ema10_1min
    ema20_1min_EA  = ema20_1min
    ema50_1min_EA  = ema50_1min
    ema100_1min_EA = ema100_1min
    ema200_1min_EA = ema200_1min

    // (EMA10 > EMA20) and (EMA20 > EMA50, EMA100, EMA200)
    emas_aligned_1min_EA = (ema10_1min_EA > ema20_1min_EA) and (ema20_1min_EA > ema50_1min_EA) and (ema20_1min_EA > ema100_1min_EA) and (ema20_1min_EA > ema200_1min_EA)
    
    priceAboveEMA10_1min_EA   = close > ema10_1min_EA
    isBullishCandle_1min_EA   = close > open
    priceCrossedEMA10_1min_EA = (low <= ema10_1min_EA) and (high >= ema10_1min_EA)
    
    prev_open_above_ema20_1min_EA  = open[1] > ema20_1min[1]
    prev_close_above_ema20_1min_EA = close[1] > ema20_1min[1]
    
    if emas_aligned_1min_EA and priceAboveEMA10_1min_EA and priceCrossedEMA10_1min_EA and isBullishCandle_1min_EA and prev_open_above_ema20_1min_EA and prev_close_above_ema20_1min_EA and barstate.isconfirmed and priceAboveDaily20
        label.new(bar_index, high + (high - low) * 0.5, "Long", color=color.blue, textcolor=color.white, style=label.style_label_up)
        long_signal := true

// --- Updated EA Logic for 10-Second ---
if timeframe.isintraday and timeframe.multiplier == 10 and (dailyConfirmed_10sec or dailyOpenCondition) and in_trading_window and close > ema20_daily and priceAboveDaily20
    // Reuse same EMAs at 10sec:
    ema10_10sec_EA  = ema10_10sec
    ema20_10sec_EA  = ema20_10sec
    ema50_10sec_EA  = ema50_10sec
    ema100_10sec_EA = ema100_10sec
    ema200_10sec_EA = ema200_10sec
    
    // (EMA10 > EMA20) and (EMA20 > EMA50, EMA100, EMA200)
    emas_aligned_10sec_EA = (ema10_10sec_EA > ema20_10sec_EA) and (ema20_10sec_EA > ema50_10sec_EA) and (ema20_10sec_EA > ema100_10sec_EA) and (ema20_10sec_EA > ema200_10sec_EA)
    
    priceAboveEMA10_10sec_EA   = close > ema10_10sec_EA
    isBullishCandle_10sec_EA   = close > open
    priceCrossedEMA10_10sec_EA = (low <= ema10_10sec_EA) and (high >= ema10_10sec_EA)
    
    if emas_aligned_10sec_EA and priceAboveEMA10_10sec_EA and priceCrossedEMA10_10sec_EA and isBullishCandle_10sec_EA and barstate.isconfirmed and priceAboveDaily20
        label.new(bar_index, high + (high - low) * 0.5, "Long", color=color.blue, textcolor=color.white, style=label.style_label_up)
        long_signal := true

//---- Bullish Engulfing Indicator -----
/* User Inputs for Engulfing Bar Toggles */
enableEma50  = input.bool(true,  "Enable EMA50 Engulfing")
enableEma100 = input.bool(true,  "Enable EMA100 Engulfing")
enableEma200 = input.bool(true,  "Enable EMA200 Engulfing")

// 2. Determine candle touch for specific EMAs
touchEma10or20 = (low <= ema10 and high >= ema10) or (low <= ema20 and high >= ema20)
touchEma50or100or200 = ((enableEma50  and low <= ema50  and high >= ema50) or 
                        (enableEma100 and low <= ema100 and high >= ema100) or 
                        (enableEma200 and low <= ema200 and high >= ema200))

// 3. Bullish condition based on body sizes
prevBearish       = close[1] < open[1]
currBullish       = close > open
redBody           = math.abs(close[1] - open[1])
greenBody         = math.abs(close - open)
bodyGreenGreater  = greenBody > redBody
bullishCondition  = prevBearish and currBullish and bodyGreenGreater

// 4. Conditions for labeling based on EMA relations
conditionGreen = bullishCondition and 
                 (ema10 > ema20 and ema20 > ema200) and 
                 not((ema50 > ema200) and (ema100 > ema200)) and 
                 touchEma10or20 and
                 (close > ema10)

conditionOrange = bullishCondition and 
                  (ema10 > ema200 and ema20 > ema200 and ema50 > ema200 and ema100 > ema200) and 
                  touchEma50or100or200

// 5. Timeframe Restriction
isAllowedTF = (timeframe.period == "1" or timeframe.period == "10S")

// 6. Final labeling based on conditions, timeframe, trading window, and cascading daily confirmation
//     Added condition to only generate a BG label if the bar's high is above the Price Action Line and price is above the daily 20 EMA.
if isAllowedTF and in_trading_window and (dailyConfirmed_1min or dailyOpenCondition or crossed_below_daily_ema10_today_1min) and priceAboveDaily20 and (na(priceActionLine) or high > priceActionLine)
    if conditionGreen
        label.new(bar_index, high, 
                  style     = label.style_label_down, 
                  color     = color.new(color.green, 0), 
                  textcolor = color.white,
                  text      = "BG",
                  size      = size.small)
        long_signal := true
    else if conditionOrange
        label.new(bar_index, high, 
                  style     = label.style_label_down, 
                  color     = color.new(color.orange, 0), 
                  textcolor = color.white,
                  text      = "BG",
                  size      = size.small)
        long_signal := true

//----- End of Bullish Engulfing Indicator -----

// --- Debugging Label Logic for crossing below daily 10 EMA on 1-Minute Timeframe ---
if timeframe.isintraday and timeframe.multiplier == 1 and priceAboveDaily20
    if price_crossed_below_ema10_daily_1min
        label.new(bar_index, high, "Crossed Below", color=color.green, textcolor=color.white, style=label.style_label_down)

// --- Strategy Execution ---
var float fixed_stop_loss_level = na
var float trailing_stop         = na
var float stop_level            = na
var bool  trailing_active       = false

if (long_signal and strategy.position_size <= 0 and in_trading_window and trade_count_in_window < max_trades_per_window)
    fixed_stop_loss_level := ema200 * (1 - initial_stop_loss_percent / 100)
    trailing_stop         := fixed_stop_loss_level
    trailing_active       := false

    distanceToStopLoss = math.abs(close - fixed_stop_loss_level)
    distanceToStopLoss := distanceToStopLoss > 0 ? distanceToStopLoss : 0.0001
    // Use fixed 100k base for risk calculation
    riskAmount   = 100000 * (riskPercentage / 100)
    positionSize = riskAmount / distanceToStopLoss

    // Calculate volume based on contract size
    volume = positionSize / contractSize

    pipDistance       = distanceToStopLoss / pipSize
    entryAlertMessage = "7766821208277,buy," + tickerSymbol + ",risk=" + str.tostring(volume)

    strategy.entry("Long", strategy.long, qty=positionSize, alert_message=entryAlertMessage)
    alert(entryAlertMessage, alert.freq_once_per_bar_close)
    trade_count_in_window += 1

if (strategy.position_size > 0)
    if (not trailing_active and not na(priceActionLine) and priceActionLine > strategy.position_avg_price)
        trailing_active := true
        trailing_stop   := priceActionLine
    if (trailing_active and not na(priceActionLine))
        trailing_stop := math.max(trailing_stop, priceActionLine)
    stop_level := trailing_stop
    strategy.exit("Stop Loss", "Long", stop=stop_level, alert_message="7766821208277,closelong," + tickerSymbol)

plot(strategy.position_size > 0 ? stop_level : na, title="Stop Loss", color=color.yellow, linewidth=2)

var bool wasInPosition = false
stop_triggered = wasInPosition and (strategy.position_size == 0) and (close <= stop_level)
if stop_triggered
    alert("Stop loss triggered for " + tickerSymbol, alert.freq_once_per_bar_close)

wasInPosition := strategy.position_size > 0

// --- End of Strategy ---
