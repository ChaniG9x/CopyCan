//@version=5
strategy("Monthly & Weekly Bias + EMA Order + Risk Management", overlay=true, pyramiding=0)

// ===== RISK MANAGEMENT INPUTS =====
accountNumber = input.string("7766821208277", title="Account Number", tooltip="Manually enter the account number (e.g., 12345678)")
tickerSymbol = input.string("EURNZD", title="Ticker Symbol", tooltip="Enter the ticker symbol for alerts")
pipSize = input.float(0.0001, title="Pip Size", tooltip="Define pip size (0.0001 Forex, 1 Indices)")
riskPercentage = input.float(1.0, "Risk Percentage per Trade", minval=0.1, maxval=100, step=0.1)
contractSize = input.float(1.0, title="Contract Size", tooltip="Contract size from strategy input tabs")
initial_stop_loss_percent = input.float(0.03, "Initial Stop Loss % Below EMA", minval=0.0, step=0.01)
max_trades_per_window = input.int(2, "Max Trades per Trading Window", minval=1)

// ===== ORIGINAL INPUTS =====
group_trading_window = "Trading Windows"
s1_start_hr  = input.int(9, "Session 1 Start Hour", minval=0, maxval=23, group=group_trading_window)
s1_start_min = input.int(0, "Session 1 Start Minute", minval=0, maxval=59, group=group_trading_window)
s1_end_hr    = input.int(12, "Session 1 End Hour", minval=0, maxval=23, group=group_trading_window)
s1_end_min   = input.int(0, "Session 1 End Minute", minval=0, maxval=59, group=group_trading_window)
s2_start_hr  = input.int(14, "Session 2 Start Hour", minval=0, maxval=23, group=group_trading_window)
s2_start_min = input.int(0, "Session 2 Start Minute", minval=0, maxval=59, group=group_trading_window)
s2_end_hr    = input.int(16, "Session 2 End Hour", minval=0, maxval=23, group=group_trading_window)
s2_end_min   = input.int(0, "Session 2 End Minute", minval=0, maxval=59, group=group_trading_window)

allow_mom_a  = input.bool(true, "Momentum: Allow Setup A",    group="Setup Filters")
allow_mom_b  = input.bool(true, "Momentum: Allow Setup B",    group="Setup Filters")
allow_ret_a  = input.bool(true, "Retracement: Allow Setup A", group="Setup Filters")
allow_ret_b  = input.bool(true, "Retracement: Allow Setup B", group="Setup Filters")
allow_rea_a  = input.bool(true, "Reaction: Allow Setup A",    group="Setup Filters")
allow_rea_b  = input.bool(true, "Reaction: Allow Setup B",    group="Setup Filters")

sl_buffer_pct = input.float(0.0, "Stop Loss Buffer (%)", minval=0.0, step=0.01, group="Global SL Settings")

// Momentum entries
group_M_SE       = "Momentum: Super Early (M.SE)"
allow_M_SE       = input.bool(true, "Enable", group=group_M_SE)
sl_M_SE          = input.string("200", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_M_SE)
trail_M_SE       = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_M_SE)

group_M_E_F50    = "Momentum: Early F50 (M.E.F50)"
allow_M_E_F50    = input.bool(true, "Enable", group=group_M_E_F50)
sl_M_E_F50       = input.string("50", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_M_E_F50)
trail_M_E_F50    = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_M_E_F50)

group_M_E_F100   = "Momentum: Early F100 (M.E.F100)"
allow_M_E_F100   = input.bool(true, "Enable", group=group_M_E_F100)
sl_M_E_F100      = input.string("100", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_M_E_F100)
trail_M_E_F100   = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_M_E_F100)

group_M_E_F200   = "Momentum: Early F200 (M.E.F200)"
allow_M_E_F200   = input.bool(true, "Enable", group=group_M_E_F200)
sl_M_E_F200      = input.string("200", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_M_E_F200)
trail_M_E_F200   = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_M_E_F200)

// Retracement entries
group_R_SE       = "Retracement: Super Early (R.SE)"
allow_R_SE       = input.bool(true, "Enable", group=group_R_SE)
sl_R_SE          = input.string("200", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_R_SE)
trail_R_SE       = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_R_SE)

group_R_E_F50    = "Retracement: Early F50 (R.E.F50)"
allow_R_E_F50    = input.bool(true, "Enable", group=group_R_E_F50)
sl_R_E_F50       = input.string("50", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_R_E_F50)
trail_R_E_F50    = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_R_E_F50)

group_R_E_F100   = "Retracement: Early F100 (R.E.F100)"
allow_R_E_F100   = input.bool(true, "Enable", group=group_R_E_F100)
sl_R_E_F100      = input.string("100", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_R_E_F100)
trail_R_E_F100   = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_R_E_F100)

group_R_E_F200   = "Retracement: Early F200 (R.E.F200)"
allow_R_E_F200   = input.bool(true, "Enable", group=group_R_E_F200)
sl_R_E_F200      = input.string("200", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_R_E_F200)
trail_R_E_F200   = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_R_E_F200)

// Reaction entries
group_X_SE_10    = "Reaction: Super Early EMA10 (X.SE.EMA10)"
allow_X_SE_10    = input.bool(true, "Enable", group=group_X_SE_10)
sl_X_SE_10       = input.string("200", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_X_SE_10)
trail_X_SE_10    = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_X_SE_10)

group_X_SE_20    = "Reaction: Super Early EMA20 (X.SE.EMA20)"
allow_X_SE_20    = input.bool(true, "Enable", group=group_X_SE_20)
sl_X_SE_20       = input.string("200", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_X_SE_20)
trail_X_SE_20    = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_X_SE_20)

group_X_E_F50_10 = "Reaction: Early F50 EMA10 (X.E.F50.10)"
allow_X_E_F50_10 = input.bool(true, "Enable", group=group_X_E_F50_10)
sl_X_E_F50_10    = input.string("50", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_X_E_F50_10)
trail_X_E_F50_10 = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_X_E_F50_10)

group_X_E_F100_10 = "Reaction: Early F100 EMA10 (X.E.F100.10)"
allow_X_E_F100_10 = input.bool(true, "Enable", group=group_X_E_F100_10)
sl_X_E_F100_10    = input.string("100", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_X_E_F100_10)
trail_X_E_F100_10 = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_X_E_F100_10)

group_X_E_F200_10 = "Reaction: Early F200 EMA10 (X.E.F200.10)"
allow_X_E_F200_10 = input.bool(true, "Enable", group=group_X_E_F200_10)
sl_X_E_F200_10    = input.string("200", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_X_E_F200_10)
trail_X_E_F200_10 = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_X_E_F200_10)

group_X_E_F50_20 = "Reaction: Early F50 EMA20 (X.E.F50.20)"
allow_X_E_F50_20 = input.bool(true, "Enable", group=group_X_E_F50_20)
sl_X_E_F50_20    = input.string("50", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_X_E_F50_20)
trail_X_E_F50_20 = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_X_E_F50_20)

group_X_E_F100_20 = "Reaction: Early F100 EMA20 (X.E.F100.20)"
allow_X_E_F100_20 = input.bool(true, "Enable", group=group_X_E_F100_20)
sl_X_E_F100_20    = input.string("100", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_X_E_F100_20)
trail_X_E_F100_20 = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_X_E_F100_20)

group_X_E_F200_20 = "Reaction: Early F200 EMA20 (X.E.F200.20)"
allow_X_E_F200_20 = input.bool(true, "Enable", group=group_X_E_F200_20)
sl_X_E_F200_20    = input.string("200", "Stop Loss EMA", options=["20", "50", "100", "200", "350"], group=group_X_E_F200_20)
trail_X_E_F200_20 = input.timeframe("15", "Trail Timeframe", options=["5", "15", "30", "60", "240", "D"], group=group_X_E_F200_20)

selectedTimeframe_PA = input.timeframe("15", title="Select Timeframe for Price Action", options=["1", "5", "10", "15", "30", "60", "240", "D"])
adjust_pct = input.float(0.0, "Price Action Line Adjustment (%)", minval=-100, maxval=100, step=0.1)

// ===== RISK MANAGEMENT VARIABLES =====
var int trade_count_in_window = 0
var bool prev_in_trading_window = false
var float fixed_stop_loss_level = na
var float trailing_stop = na
var bool trailing_active = false
var bool wasInPosition = false

// ===== POSITION SIZING FUNCTION =====
getPositionSize(entry_price, stop_level) =>
    distanceToStopLoss = math.abs(entry_price - stop_level)
    distanceToStopLoss := distanceToStopLoss > 0 ? distanceToStopLoss : 0.0001
    riskAmount = 100000 * (riskPercentage / 100)
    positionSize = riskAmount / distanceToStopLoss
    volume = positionSize / contractSize
    [positionSize, volume]

// ===== TRADING WINDOW LOGIC =====
s1_start = timestamp("GMT+0", year, month, dayofmonth, s1_start_hr, s1_start_min)
s1_end   = timestamp("GMT+0", year, month, dayofmonth, s1_end_hr, s1_end_min)
s2_start = timestamp("GMT+0", year, month, dayofmonth, s2_start_hr, s2_start_min)
s2_end   = timestamp("GMT+0", year, month, dayofmonth, s2_end_hr, s2_end_min)

in_session_1 = time >= s1_start and time <= s1_end
in_session_2 = time >= s2_start and time <= s2_end
in_session   = in_session_1 or in_session_2

// Reset trade count at start of new trading window
if in_session and not prev_in_trading_window
    trade_count_in_window := 0

prev_in_trading_window := in_session

// ===== ORIGINAL STRATEGY LOGIC =====
f_completed_htf(tf, src) =>
    request.security(syminfo.tickerid, tf, src[barstate.isconfirmed ? 0 : 1], lookahead=barmerge.lookahead_off)

f_price_action_htf() =>
    isGreen = close > open
    prevIsRed = close[1] < open[1]
    cond1 = isGreen and close > high[1]
    cond2 = isGreen and close > open[1] and prevIsRed
    (cond1 or cond2) ? low : na

monthly_close      = f_completed_htf("M", close)
monthly_open       = f_completed_htf("M", open)
recent_red_open    = ta.valuewhen(monthly_close < monthly_open, monthly_open, 0)
recent_green_open  = ta.valuewhen(monthly_close > monthly_open, monthly_open, 0)
var string monthly_status = "Neutral"
if monthly_close > monthly_open
    if na(recent_red_open) or monthly_close > recent_red_open
        monthly_status := "Bullish"
else if monthly_close < monthly_open
    if na(recent_green_open) or monthly_close < recent_green_open
        monthly_status := "Bearish"

daily_close      = f_completed_htf("D", close)
daily_open       = f_completed_htf("D", open)
daily_prev_close = f_completed_htf("D", close[1])
daily_prev_open  = f_completed_htf("D", open[1])
daily_prev_green_open = daily_prev_close > daily_prev_open ? daily_prev_open : na
daily_prev_red_open   = daily_prev_close < daily_prev_open ? daily_prev_open : na
daily_bullish = (daily_close > daily_open and (na(daily_prev_red_open) or daily_close > daily_prev_red_open)) or  (daily_close >= daily_open and (na(daily_prev_red_open) or daily_close >= daily_prev_red_open))
daily_bearish  = (daily_close < daily_open and (na(daily_prev_green_open) or daily_close < daily_prev_green_open))

weekly_close       = f_completed_htf("W", close)
weekly_open        = f_completed_htf("W", open)
recent_red_open_w   = ta.valuewhen(weekly_close < weekly_open, weekly_open, 0)
recent_green_open_w = ta.valuewhen(weekly_close > weekly_open, weekly_open, 0)
var string weekly_status = "Neutral"
if weekly_close > weekly_open
    if na(recent_red_open_w) or weekly_close > recent_red_open_w
        weekly_status := "Bullish"
else if weekly_close < weekly_open
    if na(recent_green_open_w) or weekly_close < recent_green_open_w
        weekly_status := "Bearish"

[ema10_m, ema20_m, ema50_m, ema100_m] = request.security(syminfo.tickerid, "M",  [ta.ema(close, 10), ta.ema(close, 20), ta.ema(close, 50), ta.ema(close, 100)],  lookahead=barmerge.lookahead_off)
monthly_ema_flag = (ema10_m > ema20_m and ema20_m > ema50_m and ema50_m > ema100_m) ? "Aligned" : "Not Aligned"

[ema10_w, ema20_w, ema50_w, ema100_w] = request.security(syminfo.tickerid, "W",  [ta.ema(close, 10), ta.ema(close, 20), ta.ema(close, 50), ta.ema(close, 100)], lookahead=barmerge.lookahead_off)
weekly_ema_flag = (ema10_w > ema20_w and ema20_w > ema50_w and ema50_w > ema100_w) ? "Aligned" : "Not Aligned"

string overall_condition = (monthly_status == "Bullish" and weekly_status == "Bullish")
     ? (monthly_ema_flag == "Aligned" and weekly_ema_flag == "Aligned"
         ? "Setup A" : "Setup B")
     : "NO TRADE"
is_setup_a = overall_condition == "Setup A"
is_setup_b = overall_condition == "Setup B"

allow_momentum    = (is_setup_a and allow_mom_a) or (is_setup_b and allow_mom_b)
allow_retracement = (is_setup_a and allow_ret_a) or (is_setup_b and allow_ret_b)
allow_reaction    = (is_setup_a and allow_rea_a) or (is_setup_b and allow_rea_b)

plot(ta.ema(close, 10),  title="EMA 10",  color=color.blue,   linewidth=2)
plot(ta.ema(close, 20),  title="EMA 20",  color=color.red,    linewidth=2)
plot(ta.ema(close, 50),  title="EMA 50",  color=color.gray,   linewidth=2)
plot(ta.ema(close,100),  title="EMA 100", color=color.purple, linewidth=2)
plot(ta.ema(close,200),  title="EMA 200", color=color.orange, linewidth=2)
plot(ta.ema(close, 350), title="EMA 350", color=color.lime, linewidth=2)

live_ema10_snapshot = request.security(syminfo.tickerid, "D", ta.ema(close, 10), lookahead=barmerge.lookahead_on)
live_ema20_snapshot = request.security(syminfo.tickerid, "D", ta.ema(close, 20), lookahead=barmerge.lookahead_on)

daily_ema10  = request.security(syminfo.tickerid, "D", ta.ema(close, 10), lookahead=barmerge.lookahead_off)
daily_ema20  = request.security(syminfo.tickerid, "D", ta.ema(close, 20), lookahead=barmerge.lookahead_off)
daily_ema50  = request.security(syminfo.tickerid, "D", ta.ema(close, 50), lookahead=barmerge.lookahead_off)
daily_ema100 = request.security(syminfo.tickerid, "D", ta.ema(close,100), lookahead=barmerge.lookahead_off)
daily_ema200 = request.security(syminfo.tickerid, "D", ta.ema(close,200), lookahead=barmerge.lookahead_off)

daily_ema_ok = daily_ema10  > daily_ema20 and
               daily_ema20  > daily_ema50 and
               daily_ema50  > daily_ema100 and
               daily_ema100 > daily_ema200

dtf_ema10  = ta.ema(close, 10)
dtf_ema20  = ta.ema(close, 20)
dtf_ema50  = ta.ema(close, 50)
dtf_ema100 = ta.ema(close, 100)
dtf_ema200 = ta.ema(close, 200)
dtf_ema350 = ta.ema(close, 350)

f_get_dominant() =>
    var float dom_open = na
    var float dom_close = na
    var float dom_saved_close = na
    red1_o = open[1], red1_c = close[1]
    red2_o = open[2], red2_c = close[2]
    red3_o = open[3], red3_c = close[3]
    red4_o = open[4], red4_c = close[4]
    red5_o = open[5], red5_c = close[5]
    green1_o = open[1], green1_c = close[1]
    green2_o = open[2], green2_c = close[2]
    green3_o = open[3], green3_c = close[3]
    last_red_open = red1_c < red1_o ? red1_o : red2_c < red2_o ? red2_o : red3_c < red3_o ? red3_o :red4_c < red4_o ? red4_o : red5_c < red5_o ? red5_o : na
    last_green_close = green1_c > green1_o ? green1_c :
                       green2_c > green2_o ? green2_c :
                       green3_c > green3_o ? green3_c : na
    is_green = close > open
    is_new_dominant = is_green and (close > last_red_open or close > last_green_close)
    if is_new_dominant
        dom_open := open
        dom_close := close
        dom_saved_close := close
    [dom_open, dom_close, dom_saved_close]

[dom_open_d, dom_close_d, dom_saved_close_d] = request.security(syminfo.tickerid, "D", f_get_dominant(), lookahead=barmerge.lookahead_off)
var float dominant_open        = na
var float dominant_close       = na
var float dominant_saved_close = na
var float dominant_saved_open  = na
dominant_open        := nz(dom_open_d,        dominant_open[1])
dominant_close       := nz(dom_close_d,       dominant_close[1])
dominant_saved_close := nz(dom_saved_close_d, dominant_saved_close[1])
dominant_saved_open  := nz(dom_open_d,        dominant_saved_open[1])

if not na(dom_open_d) and timeframe.period == "D"
    label.new(
      bar_index, high,
      "✓ Dominant Bullish\nOpen: " + str.tostring(dom_open_d, "#.##") +
      "\nClose: " + str.tostring(dom_close_d, "#.##") +
      "\nEMA10: " + str.tostring(live_ema10_snapshot, "#.##") +
      "\nEMA20: " + str.tostring(live_ema20_snapshot, "#.##"),
      style=label.style_label_down, textcolor=color.white,
      size=size.normal, color=color.green)

isSuperEarlyEntry(ema10, ema20, ema50, ema100, ema200) =>
    ema10 > ema20 and ema20 > ema200 and ema50 < ema200 and ema100 < ema200 and close > open and close[1] < open[1] and close > ema10 and ((low < ema10 or low < ema20) or (low[1] < ema10 or low[1] < ema20)) and ((high > ema10 or high > ema20) or (high[1] > ema10 or high[1] > ema20)) and (math.abs(close - open) > math.abs(close[1] - open[1]))
crossed(ema) =>
    (low < ema and high > ema) or (low[1] < ema and high[1] > ema)
isEarlyEntry(ema50, ema100, ema200) =>
    ema50 > ema200 and ema100 > ema200 and ta.ema(close, 10) > ema200 and close > open and close[1] < open[1] and (crossed(ema50) or crossed(ema100) or crossed(ema200)) and close > ema200 and math.abs(close - open) > math.abs(close[1] - open[1])

super_early_entry_ok = isSuperEarlyEntry(dtf_ema10, dtf_ema20, dtf_ema50, dtf_ema100, dtf_ema200)
early_entry_ok       = isEarlyEntry(dtf_ema50, dtf_ema100, dtf_ema200)

is_momentum = close > dominant_saved_close and daily_ema_ok and allow_momentum and in_session

getOffEMA(ema50, ema100, ema200) =>
    crossed50  = crossed(ema50)
    crossed100 = crossed(ema100)
    crossed200 = crossed(ema200)
    emaOff = crossed200 ? 200 : crossed100 ? 100 : crossed50 ? 50 : na
    emaOff

// ===== MODIFIED ENTRY POINTS WITH RISK MANAGEMENT =====
// Momentum entries
if (timeframe.period == "1" or timeframe.period == "10S") and is_momentum and in_session and trade_count_in_window < max_trades_per_window
    label_text = "Dom Close: " + str.tostring(dominant_saved_close, "#.##")
    
    // M.SE Entry
    if super_early_entry_ok and allow_M_SE
        base_sl = str.tonumber(sl_M_SE) == 50 ? dtf_ema50 :
                  str.tonumber(sl_M_SE) == 100 ? dtf_ema100 :
                  str.tonumber(sl_M_SE) == 200 ? dtf_ema200 :
                  str.tonumber(sl_M_SE) == 350 ? dtf_ema350 : dtf_ema200
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="M.SE", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "M.SE\n" + label_text, style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal)
    
    // M.E.F50 Entry
    else if early_entry_ok
        emaOff = getOffEMA(dtf_ema50, dtf_ema100, dtf_ema200)
        if emaOff == 50 and allow_M_E_F50
            base_sl = str.tonumber(sl_M_E_F50) == 50 ? dtf_ema50 :
                      str.tonumber(sl_M_E_F50) == 100 ? dtf_ema100 :
                      str.tonumber(sl_M_E_F50) == 200 ? dtf_ema200 :
                      str.tonumber(sl_M_E_F50) == 350 ? dtf_ema350 : dtf_ema50
            stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
            [positionSize, volume] = getPositionSize(close, stop_level)
            entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
            strategy.entry(id="M.E.F50", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
            trade_count_in_window += 1
            label.new(bar_index, low, "M.E.F50\n" + label_text, style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal)
        
        // M.E.F100 Entry
        else if emaOff == 100 and allow_M_E_F100
            base_sl = str.tonumber(sl_M_E_F100) == 50 ? dtf_ema50 :
                      str.tonumber(sl_M_E_F100) == 100 ? dtf_ema100 :
                      str.tonumber(sl_M_E_F100) == 200 ? dtf_ema200 :
                      str.tonumber(sl_M_E_F100) == 350 ? dtf_ema350 : dtf_ema100
            stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
            [positionSize, volume] = getPositionSize(close, stop_level)
            entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
            strategy.entry(id="M.E.F100", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
            trade_count_in_window += 1
            label.new(bar_index, low, "M.E.F100\n" + label_text, style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal)
        
        // M.E.F200 Entry
        else if emaOff == 200 and allow_M_E_F200
            base_sl = str.tonumber(sl_M_E_F200) == 50 ? dtf_ema50 :
                      str.tonumber(sl_M_E_F200) == 100 ? dtf_ema100 :
                      str.tonumber(sl_M_E_F200) == 200 ? dtf_ema200 :
                      str.tonumber(sl_M_E_F200) == 350 ? dtf_ema350 : dtf_ema200
            stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
            [positionSize, volume] = getPositionSize(close, stop_level)
            entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
            strategy.entry(id="M.E.F200", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
            trade_count_in_window += 1
            label.new(bar_index, low, "M.E.F200\n" + label_text, style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal)

// Retracement entries
is_retracement = daily_ema_ok and daily_bullish and (
                     (low < dominant_saved_open and close > dominant_saved_open) or
                     (low[1] < dominant_saved_open and close > dominant_saved_open)
                 )

var bool retracement_active = false
var bool reaction_active    = false
var int  reaction_ema       = na
is_new_day = ta.change(time("D"))
if is_new_day
    retracement_active := false
    reaction_active    := false
    reaction_ema       := na

if not retracement_active and is_retracement and allow_retracement
    retracement_active := true

if retracement_active and (close > dominant_saved_close or low < dominant_saved_open)
    retracement_active := false

show_retracement_label = retracement_active and close < dominant_saved_close
if (timeframe.period == "1" or timeframe.period == "10S") and show_retracement_label and in_session and trade_count_in_window < max_trades_per_window
    label_text = "Dom Open: " + str.tostring(dominant_saved_open, "#.##")
    
    // R.SE Entry
    if super_early_entry_ok and allow_R_SE
        base_sl = str.tonumber(sl_R_SE) == 50 ? dtf_ema50 :
                  str.tonumber(sl_R_SE) == 100 ? dtf_ema100 :
                  str.tonumber(sl_R_SE) == 200 ? dtf_ema200 :
                  str.tonumber(sl_R_SE) == 350 ? dtf_ema350 : dtf_ema200
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="R.SE", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "R.SE\n" + label_text, style=label.style_label_upper_right, color=color.fuchsia, textcolor=color.white, size=size.normal)
    
    // R.E.F50 Entry
    else if early_entry_ok
        emaOff = getOffEMA(dtf_ema50, dtf_ema100, dtf_ema200)
        if emaOff == 50 and allow_R_E_F50
            base_sl = str.tonumber(sl_R_E_F50) == 50 ? dtf_ema50 :
                      str.tonumber(sl_R_E_F50) == 100 ? dtf_ema100 :
                      str.tonumber(sl_R_E_F50) == 200 ? dtf_ema200 :
                      str.tonumber(sl_R_E_F50) == 350 ? dtf_ema350 : dtf_ema50
            stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
            [positionSize, volume] = getPositionSize(close, stop_level)
            entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
            strategy.entry(id="R.E.F50", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
            trade_count_in_window += 1
            label.new(bar_index, low, "R.E.F50\n" + label_text, style=label.style_label_upper_right, color=color.purple, textcolor=color.white, size=size.normal)
        
        // R.E.F100 Entry
        else if emaOff == 100 and allow_R_E_F100
            base_sl = str.tonumber(sl_R_E_F100) == 50 ? dtf_ema50 :
                      str.tonumber(sl_R_E_F100) == 100 ? dtf_ema100 :
                      str.tonumber(sl_R_E_F100) == 200 ? dtf_ema200 :
                      str.tonumber(sl_R_E_F100) == 350 ? dtf_ema350 : dtf_ema100
            stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
            [positionSize, volume] = getPositionSize(close, stop_level)
            entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
            strategy.entry(id="R.E.F100", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
            trade_count_in_window += 1
            label.new(bar_index, low, "R.E.F100\n" + label_text, style=label.style_label_upper_right, color=color.purple, textcolor=color.white, size=size.normal)
        
        // R.E.F200 Entry
        else if emaOff == 200 and allow_R_E_F200
            base_sl = str.tonumber(sl_R_E_F200) == 50 ? dtf_ema50 :
                      str.tonumber(sl_R_E_F200) == 100 ? dtf_ema100 :
                      str.tonumber(sl_R_E_F200) == 200 ? dtf_ema200 :
                      str.tonumber(sl_R_E_F200) == 350 ? dtf_ema350 : dtf_ema200
            stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
            [positionSize, volume] = getPositionSize(close, stop_level)
            entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
            strategy.entry(id="R.E.F200", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
            trade_count_in_window += 1
            label.new(bar_index, low, "R.E.F200\n" + label_text, style=label.style_label_upper_right, color=color.purple, textcolor=color.white, size=size.normal)

// Reaction entries
reaction_crossed_10 = ((open < live_ema10_snapshot and close > live_ema10_snapshot) or
                       (open[1] < live_ema10_snapshot and close > live_ema10_snapshot))
reaction_crossed_20 = ((open < live_ema20_snapshot and close > live_ema20_snapshot) or
                       (open[1] < live_ema20_snapshot and close > live_ema20_snapshot))

if not reaction_active and daily_ema_ok and (reaction_crossed_10 or reaction_crossed_20) and allow_reaction
    reaction_active := true
    reaction_ema    := reaction_crossed_10 ? 10 : 20

show_reaction_label = reaction_active and daily_ema_ok and  
                      ((reaction_ema == 10 and close > live_ema10_snapshot) or 
                       (reaction_ema == 20 and close > live_ema20_snapshot))
if (timeframe.period == "1" or timeframe.period == "10S") and show_reaction_label and in_session and trade_count_in_window < max_trades_per_window
    crossed_ema_text = reaction_ema == 10 ? "Crossed EMA10: " + str.tostring(live_ema10_snapshot, "#.##") :
                   reaction_ema == 20 ? "Crossed EMA20: " + str.tostring(live_ema20_snapshot, "#.##") : ""
    
    // X.SE.EMA10 Entry
    if super_early_entry_ok and reaction_ema == 10 and allow_X_SE_10
        base_sl = str.tonumber(sl_X_SE_10) == 50 ? dtf_ema50 :
                  str.tonumber(sl_X_SE_10) == 100 ? dtf_ema100 :
                  str.tonumber(sl_X_SE_10) == 200 ? dtf_ema200 :
                  str.tonumber(sl_X_SE_10) == 350 ? dtf_ema350 : dtf_ema200
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="X.SE.EMA10", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "X.SE.EMA10\n" + crossed_ema_text, style=label.style_label_up, color=color.teal, textcolor=color.white, size=size.normal)
    
    // X.SE.EMA20 Entry
    else if super_early_entry_ok and reaction_ema == 20 and allow_X_SE_20
        base_sl = str.tonumber(sl_X_SE_20) == 50 ? dtf_ema50 :
                  str.tonumber(sl_X_SE_20) == 100 ? dtf_ema100 :
                  str.tonumber(sl_X_SE_20) == 200 ? dtf_ema200 :
                  str.tonumber(sl_X_SE_20) == 350 ? dtf_ema350 : dtf_ema200
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="X.SE.EMA20", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "X.SE.EMA20\n" + crossed_ema_text, style=label.style_label_up, color=color.teal, textcolor=color.white, size=size.normal)
    
    // X.E.F50.10 Entry
    else if early_entry_ok and reaction_ema == 10 and allow_X_E_F50_10
        base_sl = str.tonumber(sl_X_E_F50_10) == 50 ? dtf_ema50 :
                  str.tonumber(sl_X_E_F50_10) == 100 ? dtf_ema100 :
                  str.tonumber(sl_X_E_F50_10) == 200 ? dtf_ema200 :
                  str.tonumber(sl_X_E_F50_10) == 350 ? dtf_ema350 : dtf_ema50
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="X.E.F50.10", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "X.E.F50.10\n" + crossed_ema_text, style=label.style_label_up, color=color.navy, textcolor=color.white, size=size.normal)
    
    // X.E.F100.10 Entry
    else if early_entry_ok and reaction_ema == 10 and allow_X_E_F100_10
        base_sl = str.tonumber(sl_X_E_F100_10) == 50 ? dtf_ema50 :
                  str.tonumber(sl_X_E_F100_10) == 100 ? dtf_ema100 :
                  str.tonumber(sl_X_E_F100_10) == 200 ? dtf_ema200 :
                  str.tonumber(sl_X_E_F100_10) == 350 ? dtf_ema350 : dtf_ema100
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="X.E.F100.10", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "X.E.F100.10\n" + crossed_ema_text, style=label.style_label_up, color=color.navy, textcolor=color.white, size=size.normal)
    
    // X.E.F200.10 Entry
    else if early_entry_ok and reaction_ema == 10 and allow_X_E_F200_10
        base_sl = str.tonumber(sl_X_E_F200_10) == 50 ? dtf_ema50 :
                  str.tonumber(sl_X_E_F200_10) == 100 ? dtf_ema100 :
                  str.tonumber(sl_X_E_F200_10) == 200 ? dtf_ema200 :
                  str.tonumber(sl_X_E_F200_10) == 350 ? dtf_ema350 : dtf_ema200
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="X.E.F200.10", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "X.E.F200.10\n" + crossed_ema_text, style=label.style_label_up, color=color.navy, textcolor=color.white, size=size.normal)
    
    // X.E.F50.20 Entry
    else if early_entry_ok and reaction_ema == 20 and allow_X_E_F50_20
        base_sl = str.tonumber(sl_X_E_F50_20) == 50 ? dtf_ema50 :
                  str.tonumber(sl_X_E_F50_20) == 100 ? dtf_ema100 :
                  str.tonumber(sl_X_E_F50_20) == 200 ? dtf_ema200 :
                  str.tonumber(sl_X_E_F50_20) == 350 ? dtf_ema350 : dtf_ema50
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="X.E.F50.20", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "X.E.F50.20\n" + crossed_ema_text, style=label.style_label_up, color=color.navy, textcolor=color.white, size=size.normal)
    
    // X.E.F100.20 Entry
    else if early_entry_ok and reaction_ema == 20 and allow_X_E_F100_20
        base_sl = str.tonumber(sl_X_E_F100_20) == 50 ? dtf_ema50 :
                  str.tonumber(sl_X_E_F100_20) == 100 ? dtf_ema100 :
                  str.tonumber(sl_X_E_F100_20) == 200 ? dtf_ema200 :
                  str.tonumber(sl_X_E_F100_20) == 350 ? dtf_ema350 : dtf_ema100
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="X.E.F100.20", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "X.E.F100.20\n" + crossed_ema_text, style=label.style_label_up, color=color.navy, textcolor=color.white, size=size.normal)
    
    // X.E.F200.20 Entry
    else if early_entry_ok and reaction_ema == 20 and allow_X_E_F200_20
        base_sl = str.tonumber(sl_X_E_F200_20) == 50 ? dtf_ema50 :
                  str.tonumber(sl_X_E_F200_20) == 100 ? dtf_ema100 :
                  str.tonumber(sl_X_E_F200_20) == 200 ? dtf_ema200 :
                  str.tonumber(sl_X_E_F200_20) == 350 ? dtf_ema350 : dtf_ema200
        stop_level = base_sl * (1 - initial_stop_loss_percent / 100)
        [positionSize, volume] = getPositionSize(close, stop_level)
        entryAlertMessage = accountNumber + ",buy," + tickerSymbol + ",risk=" + str.tostring(volume)
        strategy.entry(id="X.E.F200.20", direction=strategy.long, qty=positionSize, alert_message=entryAlertMessage)
        trade_count_in_window += 1
        label.new(bar_index, low, "X.E.F200.20\n" + crossed_ema_text, style=label.style_label_up, color=color.navy, textcolor=color.white, size=size.normal)

// ===== TRACK ACTIVE ENTRY =====
var string active_id = na
var float entry_price = na
if strategy.opentrades > 0
    active_id := strategy.opentrades.entry_id(0)
    entry_price := strategy.opentrades.entry_price(0)
else
    active_id := na
    entry_price := na

// ===== STOP LOSS AND TRAILING LOGIC =====
var float sl_fixed = na
var bool  trail_started = false

if strategy.opentrades == 0
    sl_fixed := na
    trail_started := false

// Convert selected EMA dropdowns to numbers
sl_M_SE_num        = str.tonumber(sl_M_SE)
sl_M_E_F50_num     = str.tonumber(sl_M_E_F50)
sl_M_E_F100_num    = str.tonumber(sl_M_E_F100)
sl_M_E_F200_num    = str.tonumber(sl_M_E_F200)
sl_R_SE_num        = str.tonumber(sl_R_SE)
sl_R_E_F50_num     = str.tonumber(sl_R_E_F50)
sl_R_E_F100_num    = str.tonumber(sl_R_E_F100)
sl_R_E_F200_num    = str.tonumber(sl_R_E_F200)
sl_X_SE_10_num     = str.tonumber(sl_X_SE_10)
sl_X_SE_20_num     = str.tonumber(sl_X_SE_20)
sl_X_E_F50_10_num  = str.tonumber(sl_X_E_F50_10)
sl_X_E_F100_10_num = str.tonumber(sl_X_E_F100_10)
sl_X_E_F200_10_num = str.tonumber(sl_X_E_F200_10)
sl_X_E_F50_20_num  = str.tonumber(sl_X_E_F50_20)
sl_X_E_F100_20_num = str.tonumber(sl_X_E_F100_20)
sl_X_E_F200_20_num = str.tonumber(sl_X_E_F200_20)

float sl_ema = na
string trail_tf = na

if active_id == "M.SE"
    sl_ema := sl_M_SE_num
    trail_tf := trail_M_SE
else if active_id == "M.E.F50"
    sl_ema := sl_M_E_F50_num
    trail_tf := trail_M_E_F50
else if active_id == "M.E.F100"
    sl_ema := sl_M_E_F100_num
    trail_tf := trail_M_E_F100
else if active_id == "M.E.F200"
    sl_ema := sl_M_E_F200_num
    trail_tf := trail_M_E_F200
else if active_id == "R.SE"
    sl_ema := sl_R_SE_num
    trail_tf := trail_R_SE
else if active_id == "R.E.F50"
    sl_ema := sl_R_E_F50_num
    trail_tf := trail_R_E_F50
else if active_id == "R.E.F100"
    sl_ema := sl_R_E_F100_num
    trail_tf := trail_R_E_F100
else if active_id == "R.E.F200"
    sl_ema := sl_R_E_F200_num
    trail_tf := trail_R_E_F200
else if active_id == "X.S极.EMA10"
    sl_ema := sl_X_SE_10_num
    trail_tf := trail_X_SE_10
else if active_id == "X.SE.EMA20"
    sl_ema := sl_X_SE_20_num
    trail_tf := trail_X_SE_20
else if active_id == "X.E.F50.10"
    sl_ema := sl_X_E_F50_10_num
    trail_tf := trail_X_E_F50_10
else if active_id == "X.E.F100.10"
    sl_ema := sl_X_E_F100_10_num
    trail_tf := trail_X_E_F100_10
else if active_id == "X.E.F200.10"
    sl_ema := sl_X_E_F200_10_num
    trail_tf := trail_X_E_F200_10
else if active_id == "X.E.F50.20"
    sl_ema := sl_X_E_F50_20_num
    trail_tf := trail_X_E_F50_20
else if active_id == "X.E.F100.20"
    sl_ema := sl_X_E_F100_20_num
    trail_tf := trail_X_E_F100_20
else if active_id == "X.E.F200.20"
    sl_ema := sl_X_E_F200_20_num
    trail_tf := trail_X_E_F200_20

base_sl = sl_ema == 50 ? dtf_ema50 :
          sl_ema == 100 ? dtf_ema100 :
          sl_ema == 200 ? dtf_ema200 :
          sl_ema == 350 ? dtf_ema350 : na

sl_level = na(base_sl) ? na : base_sl * (1 - sl_buffer_pct / 100)

// Precompute all PA line values
pa_M_SE      = request.security(syminfo.tickerid, trail_M_SE, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_M_E_F50   = request.security(syminfo.tickerid, trail_M_E_F50, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_M_E_F100  = request.security(syminfo.tickerid, trail_M_E_F100, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_M_E_F200  = request.security(syminfo.tickerid, trail_M_E_F200, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_R_SE      = request.security(syminfo.tickerid, trail_R_SE, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_R_E_F50   = request.security(syminfo.tickerid, trail_R_E_F50, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_R_E_F100  = request.security(syminfo.tickerid, trail_R_E_F100, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_R_E_F200  = request.security(syminfo.tickerid, trail_R_E_F200, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_X_SE_10   = request.security(syminfo.tickerid, trail_X_SE_10, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_X_SE_20   = request.security(syminfo.tickerid, trail_X_SE_20, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_X_E_F50_10   = request.security(syminfo.tickerid, trail_X_E_F50_10, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_X_E_F100_10  = request.security(syminfo.tickerid, trail_X_E_F100_10, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_X_E_F200_10  = request.security(syminfo.tickerid, trail_X_E_F200_10, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_X_E_F50_20   = request.security(syminfo.tickerid, trail_X_E_F50_20, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_X_E_F100_20  = request.security(syminfo.tickerid, trail_X_E_F100_20, f_price_action_htf(), lookahead=barmerge.lookahead_off)
pa_X_E_F200_20  = request.security(syminfo.tickerid, trail_X_E_F200_20, f_price_action_htf(), lookahead=barmerge.lookahead_off)

pa_line =
     active_id == "M.SE"         ? pa_M_SE :
     active_id == "M.E.F50"      ? pa_M_E_F50 :
     active_id == "M.E.F100"     ? pa_M_E_F100 :
     active_id == "M.E.F200"     ? pa_M_E_F200 :
     active_id == "R.SE"         ? pa_R_SE :
     active_id == "R.E.F50"      ? pa_R_E_F50 :
     active_id == "R.E.F100"     ? pa_R_E_F100 :
     active_id == "R.E.F200"     ? pa_R_E_F200 :
     active_id == "X.SE.EMA10"   ? pa_X_SE_10 :
     active_id == "X.SE.EMA20"   ? pa_X_SE_20 :
     active_id == "X.E.F50.10"   ? pa_X_E_F50_10 :
     active_id == "X.E.F100.10"  ? pa_X_E_F100_10 :
     active_id == "X.E.F200.10"  ? pa_X_E_F200_10 :
     active_id == "X.E.F50.20"   ? pa_X_E_F50_20 :
     active_id == "X.E.F100.20"  ? pa_X_E_F100_20 :
     active_id == "X.E.F200.20"  ? pa_X_E_F200_20 : na

pa_line_adjusted = na(pa_line) ? na : pa_line * (1 + adjust_pct / 100)
float final_stop = na

if not na(sl_level) and not na(entry_price)
    if na(sl_fixed)
        sl_fixed := sl_level

    if not trail_started and not na(pa_line_adjusted) and pa_line_adjusted > entry_price
        trail_started := true

    final_stop := trail_started ? math.max(sl_fixed, pa_line_adjusted) : sl_fixed

// ===== EXIT LOGIC WITH ALERTS =====
if not na(active_id) and not na(final_stop)
    strategy.exit(id="Exit", from_entry=active_id, stop=final_stop, 
                 alert_message=accountNumber + ",closelong," + tickerSymbol)

// ===== STOP LOSS TRACKING =====
stop_triggered = wasInPosition and (strategy.position_size == 0) and (close <= final_stop)
if stop_triggered
    alert("Stop loss triggered for " + tickerSymbol, alert.freq_once_per_bar_close)

wasInPosition := strategy.position_size > 0

// ===== PLOTTING =====
plot(final_stop, title="Active Stop Loss", color=color.red, style=plot.style_linebr, linewidth=2)
priceLineRaw = request.security(syminfo.tickerid, selectedTimeframe_PA, f_price_action_htf(), lookahead=barmerge.lookahead_off)
priceLine    = na(priceLineRaw) ? na : priceLineRaw * (1 + adjust_pct / 100)
plot(priceLine, color=color.green, title="Price Action Line", linewidth=2)
bgcolor(in_session ? color.new(color.green, 90) : na, title="Trading Window Background")

// ===== FINAL TABLE =====
var table bias_tbl = table.new(position.top_right, 3, 5, border_width=1)
table.cell(bias_tbl, 0, 0, "Timeframe",       text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 1, 0, "Status",          text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 2, 0, "EMA Order",       text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 0, 1, "Monthly",         text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 1, 1, monthly_status,    text_color=(monthly_status=="Bullish" ? color.green : color.red))
table.cell(bias_tbl, 2, 1, monthly_ema_flag,  text_color=(monthly_ema_flag=="Aligned" ? color.green : color.red))
table.cell(bias_tbl, 0, 2, "Weekly",          text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 1, 2, weekly_status,     text_color=(weekly_status=="Bullish" ? color.green : color.red))
table.cell(bias_tbl, 2, 2, weekly_ema_flag,   text_color=(weekly_ema_flag=="Aligned" ? color.green : color.red))
table.cell(bias_tbl, 0, 3, "Condition",       text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 1, 3, overall_condition, text_color=(overall_condition=="NO TRADE" ? color.red : color.green))
table.cell(bias_tbl, 2, 3, "")
table.cell(bias_tbl, 0, 4, "Dominant",        text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 1, 4, "O: " + str.tostring(dominant_open, "#.##") +
                          " / C: " + str.tostring(dominant_close, "#.##"),
                          text_color=color.white)
table.cell(bias_tbl, 2, 4, "EMA10: " + str.tostring(live_ema10_snapshot, "#.##") +
                          "\nEMA20: " + str.tostring(live_ema20_snapshot, "#.##"),
                          text_color=color.white)
