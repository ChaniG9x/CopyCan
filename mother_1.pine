//@version=5
strategy("The Mother (Phase 2)", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// === GLOBAL INPUTS ===
contractSize    = input.int(1, "Contract Size")
tradeDirection  = input.string("Long", "Trade Direction", options=["Long"], tooltip="Only bullish logic supported")
showDebugLabels = input.bool(true, "Show Debug Labels")

// === TRADING SESSION CONTROL ===
session1_start = input.time(timestamp("0000-01-01T08:00:00"), "Session 1 Start")
session1_end   = input.time(timestamp("0000-01-01T11:00:00"), "Session 1 End")
session2_start = input.time(timestamp("0000-01-01T13:00:00"), "Session 2 Start")
session2_end   = input.time(timestamp("0000-01-01T17:00:00"), "Session 2 End")

inSession = (time >= session1_start and time <= session1_end) or (time >= session2_start and time <= session2_end)

// === TIMEFRAME SETTINGS ===
monthly_tf = "M"
weekly_tf = "W"

// === Monthly Structure ===
var float monthly_prev_green_open = na
var float monthly_prev_red_open   = na

monthly_close      = request.security(syminfo.tickerid, monthly_tf, close)
monthly_open       = request.security(syminfo.tickerid, monthly_tf, open)
monthly_prev_close = request.security(syminfo.tickerid, monthly_tf, close[1])
monthly_prev_open  = request.security(syminfo.tickerid, monthly_tf, open[1])

if (monthly_prev_close > monthly_prev_open)
    monthly_prev_green_open := monthly_prev_open
else if (monthly_prev_close < monthly_prev_open)
    monthly_prev_red_open := monthly_prev_open

monthly_status = na
if (monthly_close > monthly_open and monthly_close > monthly_prev_red_open)
    monthly_status := "Bullish"
else if (monthly_close < monthly_open and monthly_close < monthly_prev_green_open)
    monthly_status := "Bearish"

// === Weekly Structure ===
var float weekly_prev_green_open = na
var float weekly_prev_red_open   = na

weekly_close      = request.security(syminfo.tickerid, weekly_tf, close)
weekly_open       = request.security(syminfo.tickerid, weekly_tf, open)
weekly_prev_close = request.security(syminfo.tickerid, weekly_tf, close[1])
weekly_prev_open  = request.security(syminfo.tickerid, weekly_tf, open[1])

if (weekly_prev_close > weekly_prev_open)
    weekly_prev_green_open := weekly_prev_open
else if (weekly_prev_close < weekly_prev_open)
    weekly_prev_red_open := weekly_prev_open

weekly_status = na
if (weekly_close > weekly_open and weekly_close > weekly_prev_red_open)
    weekly_status := "Bullish"
else if (weekly_close < weekly_open and weekly_close < weekly_prev_green_open)
    weekly_status := "Bearish"

// === EMA Stack Checks ===
ema_ok(tf) =>
    ema10  = request.security(syminfo.tickerid, tf, ta.ema(close, 10))
    ema20  = request.security(syminfo.tickerid, tf, ta.ema(close, 20))
    ema50  = request.security(syminfo.tickerid, tf, ta.ema(close, 50))
    ema100 = request.security(syminfo.tickerid, tf, ta.ema(close, 100))
    ema200 = request.security(syminfo.tickerid, tf, ta.ema(close, 200))
    ema10 > ema20 and ema20 > ema50 and ema50 > ema100 and ema100 > ema200

monthly_ema_ok = ema_ok(monthly_tf)
weekly_ema_ok  = ema_ok(weekly_tf)

// === RATING LOGIC ===
structure_is_bullish = (monthly_status == "Bullish") and (weekly_status == "Bullish")

rating = structure_is_bullish and monthly_ema_ok and weekly_ema_ok ? "A" :
         structure_is_bullish                                  ? "B" :
                                                                 "No Trade"

// === DEBUG TABLE ===
var table status_table = table.new(position.top_right, 2, 3, border_width=1)
if bar_index % 5 == 0  // only update every 5 bars for performance
    table.cell(status_table, 0, 0, "Monthly", text_color=color.white, bgcolor=color.blue)
    table.cell(status_table, 1, 0, "Weekly",  text_color=color.white, bgcolor=color.blue)
    table.cell(status_table, 0, 1, monthly_status ?? "", text_color=color.white)
    table.cell(status_table, 1, 1, weekly_status  ?? "", text_color=color.white)
    table.cell(status_table, 0, 2, "Rating", text_color=color.white, bgcolor=color.navy)
    table.cell(status_table, 1, 2, rating, text_color=(rating == "A" ? color.green : rating == "B" ? color.orange : color.red))
