//@version=5
indicator("Monthly & Weekly Bias + EMA Order + Overall Condition", overlay=true)

// ——— Helper to track last opposite‐color open ———
f_prev_opposite_open(_res) =>
    var float prev_green_open = na
    var float prev_red_open   = na
    // look back one bar inside each resolution so we only ever use closed bars
    _c = request.security(syminfo.tickerid, _res, close[1], lookahead=barmerge.lookahead_off)
    _o = request.security(syminfo.tickerid, _res, open[1],  lookahead=barmerge.lookahead_off)
    if _c > _o
        prev_green_open := _o
    else if _c < _o
        prev_red_open   := _o
    [ prev_green_open, prev_red_open ]

// ——— Monthly Status (only closed M bar) ———
[ m_prev_green_open, m_prev_red_open ] = f_prev_opposite_open("M")
m_open_closed  = request.security(syminfo.tickerid, "M", open[1],  lookahead=barmerge.lookahead_off)
m_close_closed = request.security(syminfo.tickerid, "M", close[1], lookahead=barmerge.lookahead_off)
var string monthly_status = "Bearish"
if m_close_closed > m_open_closed and m_close_closed > m_prev_red_open
    monthly_status := "Bullish"
else if m_close_closed < m_open_closed and m_close_closed < m_prev_green_open
    monthly_status := "Bearish"

// ——— Weekly Status (only closed W bar) ———
[ w_prev_green_open, w_prev_red_open ] = f_prev_opposite_open("W")
w_open_closed  = request.security(syminfo.tickerid, "W", open[1],  lookahead=barmerge.lookahead_off)
w_close_closed = request.security(syminfo.tickerid, "W", close[1], lookahead=barmerge.lookahead_off)
var string weekly_status = "Bearish"
if w_close_closed > w_open_closed and w_close_closed > w_prev_red_open
    weekly_status := "Bullish"
else if w_close_closed < w_open_closed and w_close_closed < w_prev_green_open
    weekly_status := "Bearish"

// ——— Monthly & Weekly EMAs & Order Flags ———
[ ema10_m, ema20_m, ema50_m, ema100_m ] = request.security(syminfo.tickerid, "M", 
     [ ta.ema(close,10), ta.ema(close,20), ta.ema(close,50), ta.ema(close,100) ], 
     lookahead=barmerge.lookahead_off)
monthly_ema_flag = (ema10_m > ema20_m and ema20_m > ema50_m and ema50_m > ema100_m) ? "Aligned" : "Not Aligned"

[ ema10_w, ema20_w, ema50_w, ema100_w ] = request.security(syminfo.tickerid, "W",
     [ ta.ema(close,10), ta.ema(close,20), ta.ema(close,50), ta.ema(close,100) ],
     lookahead=barmerge.lookahead_off)
weekly_ema_flag = (ema10_w > ema20_w and ema20_w > ema50_w and ema50_w > ema100_w) ? "Aligned" : "Not Aligned"

// ——— Overall Condition Logic ———
string overall_condition = (monthly_status == "Bullish" and weekly_status == "Bullish") ? (monthly_ema_flag == "Aligned" and weekly_ema_flag == "Aligned"? "Setup A"  : "Setup B") : "NO TRADE"

// ——— Draw Table with Overall Condition ———
var table bias_tbl = table.new(position.top_right, 3, 4, border_width=1)
// headers
table.cell(bias_tbl, 0, 0, "Timeframe",      text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 1, 0, "Status",         text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 2, 0, "EMA Order",      text_color=color.white, bgcolor=color.blue)
// Monthly row
table.cell(bias_tbl, 0, 1, "Monthly",        text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 1, 1, monthly_status,   text_color=(monthly_status=="Bullish" ? color.green : color.red))
table.cell(bias_tbl, 2, 1, monthly_ema_flag, text_color=(monthly_ema_flag=="Aligned" ? color.green : color.red))
// Weekly row
table.cell(bias_tbl, 0, 2, "Weekly",         text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 1, 2, weekly_status,    text_color=(weekly_status=="Bullish" ? color.green : color.red))
table.cell(bias_tbl, 2, 2, weekly_ema_flag,  text_color=(weekly_ema_flag=="Aligned" ? color.green : color.red))
// Overall Condition row
table.cell(bias_tbl, 0, 3, "Condition",      text_color=color.white, bgcolor=color.blue)
table.cell(bias_tbl, 1, 3, overall_condition, text_color=(overall_condition=="NO TRADE" ? color.red : color.green))
table.cell(bias_tbl, 2, 3, "")  // empty cell

// ——— Plot Daily EMAs (reference) ———
plot(ta.ema(close, 10),  title="EMA 10",  color=color.blue,   linewidth=2)
plot(ta.ema(close, 20),  title="EMA 20",  color=color.red,    linewidth=2)
plot(ta.ema(close, 50),  title="EMA 50",  color=color.gray,   linewidth=2)
plot(ta.ema(close,100),  title="EMA 100", color=color.purple, linewidth=2)
plot(ta.ema(close,200),  title="EMA 200", color=color.orange, linewidth=2)

// ——— Daily Dominant Bullish Bar Tracker ———

// Get daily bar values
daily_close = request.security(syminfo.tickerid, "D", close[1], lookahead=barmerge.lookahead_off)
daily_open  = request.security(syminfo.tickerid, "D", open[1],  lookahead=barmerge.lookahead_off)
daily_ema10 = request.security(syminfo.tickerid, "D", ta.ema(close, 10)[1], lookahead=barmerge.lookahead_off)

// Prior daily bar values
prev_red_open = request.security(syminfo.tickerid, "D", open[2], lookahead=barmerge.lookahead_off)
prev_red_close = request.security(syminfo.tickerid, "D", close[2], lookahead=barmerge.lookahead_off)
was_prev_red = prev_red_close < prev_red_open
daily_color = daily_close > daily_open ? 1 : daily_close < daily_open ? -1 : 0

// Initialize persistent state for dominant bar
var float dominant_open  = na
var float dominant_close = na
var float dominant_ema10 = na

// Detect new dominant bar and update only when it overtakes previous
is_new_dominant = daily_color == 1 and was_prev_red and daily_close > prev_red_open and (na(dominant_close) or daily_close > dominant_close)
if is_new_dominant
    dominant_open  := daily_open
    dominant_close := daily_close
    dominant_ema10 := daily_ema10

// Debugging: Draw label on 1m showing retained values
show_debug = input.bool(true, "Show Dominant Bar Debug (1m only)")
if show_debug and timeframe.period == "1"
    label.new(bar_index, high,
     "Dominant Bullish Bar\n" +
     "Open: " + str.tostring(dominant_open, "#.##") + "\n" +
     "Close: " + str.tostring(dominant_close, "#.##") + "\n" +
     "EMA10: " + str.tostring(dominant_ema10, "#.##"),
     style=label.style_label_down, textcolor=color.white, size=size.small, color=color.green)
